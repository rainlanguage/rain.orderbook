use super::SubgraphError;
use cynic::Id;
use rain_orderbook_common::types::OrderDetailExtended;
use rain_orderbook_subgraph_client::{
    performance::{vol::VaultVolume, OrderPerformance},
    types::common::{SgBytes, SgOrder, SgOrderWithSubgraphName, SgOrdersListFilterArgs, SgVault},
    MultiOrderbookSubgraphClient, MultiSubgraphArgs, OrderbookSubgraphClient,
    OrderbookSubgraphClientError, SgPaginationArgs,
};
use reqwest::Url;
use serde::{Deserialize, Serialize};
use std::collections::{HashMap, HashSet};
use wasm_bindgen_utils::{impl_wasm_traits, prelude::*};

#[derive(Serialize, Deserialize, Clone, Tsify)]
pub struct OrderWithSortedVaults {
    pub order: SgOrder,
    pub vaults: HashMap<String, Vec<SgVault>>,
}
impl_wasm_traits!(OrderWithSortedVaults);

#[derive(Serialize, Deserialize, Debug, Clone, Tsify)]
pub struct GetOrdersResult(
    #[tsify(type = "SgOrderWithSubgraphName[]")] Vec<SgOrderWithSubgraphName>,
);
impl_wasm_traits!(GetOrdersResult);

#[derive(Serialize, Deserialize, Debug, Clone, Tsify)]
pub struct GetOrderVaultsVolumeResult(#[tsify(type = "VaultVolume[]")] Vec<VaultVolume>);
impl_wasm_traits!(GetOrderVaultsVolumeResult);

/// Fetch all orders from multiple subgraphs
/// Returns a list of OrderWithSubgraphName structs
#[wasm_export(js_name = "getOrders", unchecked_return_type = "GetOrdersResult")]
pub async fn get_orders(
    subgraphs: Vec<MultiSubgraphArgs>,
    filter_args: SgOrdersListFilterArgs,
    pagination_args: SgPaginationArgs,
) -> Result<GetOrdersResult, SubgraphError> {
    let client = MultiOrderbookSubgraphClient::new(subgraphs);
    Ok(GetOrdersResult(
        client.orders_list(filter_args, pagination_args).await?,
    ))
}

fn sort_vaults(order: &SgOrder) -> HashMap<String, Vec<SgVault>> {
    let mut sorted_vaults: HashMap<String, Vec<SgVault>> = HashMap::new();

    let input_ids: HashSet<_> = order.inputs.iter().map(|v| &v.id).collect();
    let output_ids: HashSet<_> = order.outputs.iter().map(|v| &v.id).collect();

    sorted_vaults.insert("inputs".to_string(), Vec::new());
    sorted_vaults.insert("outputs".to_string(), Vec::new());
    sorted_vaults.insert("inputs_outputs".to_string(), Vec::new());

    for vault in &order.inputs {
        if output_ids.contains(&vault.id) {
            sorted_vaults
                .get_mut("inputs_outputs")
                .unwrap()
                .push(vault.clone());
        } else {
            sorted_vaults.get_mut("inputs").unwrap().push(vault.clone());
        }
    }

    for vault in &order.outputs {
        if !input_ids.contains(&vault.id) {
            sorted_vaults
                .get_mut("outputs")
                .unwrap()
                .push(vault.clone());
        }
    }

    sorted_vaults
}

/// Internal function to fetch a single order
/// Returns the SgOrder struct
pub async fn get_sg_order_by_hash(url: &str, hash: &str) -> Result<SgOrder, SubgraphError> {
    let client = OrderbookSubgraphClient::new(Url::parse(url)?);
    let order = client
        .order_detail_by_hash(SgBytes(hash.to_string()))
        .await?;
    Ok(order)
}

/// Fetch a single order
/// Returns the Order struct with sorted vaults
#[wasm_export(
    js_name = "getOrderByHash",
    unchecked_return_type = "OrderWithSortedVaults"
)]
pub async fn get_order_by_hash(
    url: &str,
    hash: &str,
) -> Result<OrderWithSortedVaults, SubgraphError> {
    let order = get_sg_order_by_hash(url, hash).await?;
    Ok(OrderWithSortedVaults {
        order: order.clone(),
        vaults: sort_vaults(&order),
    })
}

/// Extend an order to include Rainlang string
/// Returns an OrderDetailExtended struct
#[wasm_export(js_name = "extendOrder", unchecked_return_type = "OrderDetailExtended")]
pub fn order_detail_extended(order: SgOrder) -> Result<OrderDetailExtended, SubgraphError> {
    let order_extended: OrderDetailExtended = order
        .try_into()
        .map_err(|_| OrderbookSubgraphClientError::OrderDetailExtendError)?;
    Ok(order_extended)
}

/// Fetch volume information for vaults associated with an order
#[wasm_export(
    js_name = "getOrderVaultsVolume",
    unchecked_return_type = "GetOrderVaultsVolumeResult"
)]
pub async fn order_vaults_volume(
    url: &str,
    order_id: &str,
    start_timestamp: Option<u64>,
    end_timestamp: Option<u64>,
) -> Result<GetOrderVaultsVolumeResult, SubgraphError> {
    let client = OrderbookSubgraphClient::new(Url::parse(url)?);
    let volumes = client
        .order_vaults_volume(Id::new(order_id), start_timestamp, end_timestamp)
        .await?;
    Ok(GetOrderVaultsVolumeResult(volumes))
}

/// Measures an order's performance (including vaults apy and vol and total apy and vol)
#[wasm_export(
    js_name = "getOrderPerformance",
    unchecked_return_type = "OrderPerformance"
)]
pub async fn order_performance(
    url: &str,
    order_id: &str,
    start_timestamp: Option<u64>,
    end_timestamp: Option<u64>,
) -> Result<OrderPerformance, SubgraphError> {
    let client = OrderbookSubgraphClient::new(Url::parse(url)?);
    let performance = client
        .order_performance(Id::new(order_id), start_timestamp, end_timestamp)
        .await?;
    Ok(performance)
}

#[cfg(test)]
mod test_helpers {
    use super::*;

    #[cfg(not(target_family = "wasm"))]
    mod non_wasm {
        use super::*;
        use alloy::primitives::U256;
        use httpmock::MockServer;
        use rain_orderbook_subgraph_client::{
            performance::{
                apy::APYDetails, vol::VolumeDetails, DenominatedPerformance, VaultPerformance,
            },
            types::common::{
                SgAddOrder, SgBigInt, SgBytes, SgErc20, SgOrderAsIO, SgOrderbook, SgTransaction,
            },
        };
        use serde_json::{json, Value};

        fn get_order1_json() -> Value {
            json!(                        {
              "id": "0x1a69eeb7970d3c8d5776493327fb262e31fc880c9cc4a951607418a7963d9fa1",
              "orderBytes": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f08bcbce72f62c95dcb7c07dcb5ed26acfcfbc1100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000005c00000000000000000000000000000000000000000000000000000000000000640392c489ef67afdc348209452c338ea5ba2b6152b936e152f610d05e1a20621a40000000000000000000000005fb33d710f8b58de4c9fdec703b5c2487a5219d600000000000000000000000084c6e7f5a1e5dd89594cc25bef4722a1b8871ae60000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000049d000000000000000000000000000000000000000000000000000000000000000f0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000c7d713b49da0000914d696e20747261646520616d6f756e742e00000000000000000000000000008b616d6f756e742d75736564000000000000000000000000000000000000000000000000000000000000000000000000000000000000000340aad21b3b70000000000000000000000000000000000000000000000000006194049f30f7200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b1a2bc2ec500000000000000000000000000000000000000000000000000000e043da6172500008f6c6173742d74726164652d74696d65000000000000000000000000000000008d6c6173742d74726164652d696f0000000000000000000000000000000000008c696e697469616c2d74696d650000000000000000000000000000000000000000000000000000000000000000000000000000000000000006f05b59d3b200000000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000020000915e36ef882941816356bc3718df868054f868ad000000000000000000000000000000000000000000000000000000000000027d0a00000024007400e0015801b401e001f40218025c080500040b20000200100001001000000b120003001000010b110004001000030b0100051305000201100001011000003d120000011000020010000003100404211200001d02000001100003031000010c1200004911000003100404001000012b12000001100003031000010c1200004a0200001a0b00090b1000060b20000700100000001000011b1200001a10000047120000001000001a1000004712000001100000011000002e12000001100005011000042e120000001000053d12000001100004001000042e1200000010000601100005001000032e120000481200011d0b020a0010000001100000011000062713000001100003031000010c12000049110000001000030010000247120000001000010b110008001000050110000700100001201200001f12000001100000011000004712000000100006001000073d120000011000002b12000000100008001000043b120000160901080b1000070b10000901100008001000013d1200001b12000001100006001000013d1200000b100009001000033a120000001000040010000248120001001000000b110008001000053d12000000100006001000042b1200000a0401011a10000001100009031000010c1200004a020000001000000110000a031000010c1200004a020000040200010110000b031000010c120000491100000803000201100009031000010c120000491100000110000a031000010c12000049110000100c01030110000d001000002e1200000110000c3e1200000010000100100001001000010010000100100001001000010010000100100001001000013d1a0000020100010210000e3611000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001d80c49bbbcd1c0911346656b529df9e5c2f783d0000000000000000000000000000000000000000000000000000000000000012a6e3c06415539f92823a18ba63e1c0303040c4892970a0d1e3a27663d7583b33000000000000000000000000000000000000000000000000000000000000000100000000000000000000000012e605bc104e93b45e1ad99f9e555f659051c2bb0000000000000000000000000000000000000000000000000000000000000012a6e3c06415539f92823a18ba63e1c0303040c4892970a0d1e3a27663d7583b33",
              "orderHash": "0x557147dd0daa80d5beff0023fe6a3505469b2b8c4406ce1ab873e1a652572dd4",
              "owner": "0xf08bcbce72f62c95dcb7c07dcb5ed26acfcfbc11",
              "outputs": [
                {
                  "id": "0x49f6b665c395c7b975caa2fc167cb5119981bbb86798bcaf3c4570153d09dfcf",
                  "owner": "0xf08bcbce72f62c95dcb7c07dcb5ed26acfcfbc11",
                  "vaultId": "75486334982066122983501547829219246999490818941767825330875804445439814023987",
                  "balance": "987000000000000000",
                  "token": {
                    "id": "0x12e605bc104e93b45e1ad99f9e555f659051c2bb",
                    "address": "0x12e605bc104e93b45e1ad99f9e555f659051c2bb",
                    "name": "Staked FLR",
                    "symbol": "sFLR",
                    "decimals": "18"
                  },
                  "orderbook": {
                    "id": "0xcee8cd002f151a536394e564b84076c41bbbcd4d"
                  },
                  "ordersAsOutput": [
                    {
                      "id": "0x1a69eeb7970d3c8d5776493327fb262e31fc880c9cc4a951607418a7963d9fa1",
                      "orderHash": "0x557147dd0daa80d5beff0023fe6a3505469b2b8c4406ce1ab873e1a652572dd4",
                      "active": true
                    }
                  ],
                  "ordersAsInput": [],
                  "balanceChanges": []
                },
                {
                    "id": "0x0000000000000000000000000000000000000000",
                    "token": {
                      "id": "0x0000000000000000000000000000000000000000",
                      "address": "0x0000000000000000000000000000000000000000",
                      "name": "T1",
                      "symbol": "T1",
                      "decimals": "0"
                    },
                    "balance": "0",
                    "vaultId": "0",
                    "owner": "0x0000000000000000000000000000000000000000",
                    "ordersAsOutput": [],
                    "ordersAsInput": [],
                    "balanceChanges": [],
                    "orderbook": {
                      "id": "0x0000000000000000000000000000000000000000"
                    }
                  }
              ],
              "inputs": [
                {
                  "id": "0x538830b4f8cc03840cea5af799dc532be4363a3ee8f4c6123dbff7a0acc86dac",
                  "owner": "0xf08bcbce72f62c95dcb7c07dcb5ed26acfcfbc11",
                  "vaultId": "75486334982066122983501547829219246999490818941767825330875804445439814023987",
                  "balance": "797990000000000000",
                  "token": {
                    "id": "0x1d80c49bbbcd1c0911346656b529df9e5c2f783d",
                    "address": "0x1d80c49bbbcd1c0911346656b529df9e5c2f783d",
                    "name": "Wrapped Flare",
                    "symbol": "WFLR",
                    "decimals": "18"
                  },
                  "orderbook": {
                    "id": "0xcee8cd002f151a536394e564b84076c41bbbcd4d"
                  },
                  "ordersAsOutput": [],
                  "ordersAsInput": [
                    {
                      "id": "0x1a69eeb7970d3c8d5776493327fb262e31fc880c9cc4a951607418a7963d9fa1",
                      "orderHash": "0x557147dd0daa80d5beff0023fe6a3505469b2b8c4406ce1ab873e1a652572dd4",
                      "active": true
                    }
                  ],
                  "balanceChanges": []
                },
                {
                    "id": "0x0000000000000000000000000000000000000000",
                    "token": {
                      "id": "0x0000000000000000000000000000000000000000",
                      "address": "0x0000000000000000000000000000000000000000",
                      "name": "T1",
                      "symbol": "T1",
                      "decimals": "0"
                    },
                    "balance": "0",
                    "vaultId": "0",
                    "owner": "0x0000000000000000000000000000000000000000",
                    "ordersAsOutput": [],
                    "ordersAsInput": [],
                    "balanceChanges": [],
                    "orderbook": {
                      "id": "0x0000000000000000000000000000000000000000"
                    }
                  }
              ],
              "orderbook": {
                "id": "0xcee8cd002f151a536394e564b84076c41bbbcd4d"
              },
              "active": true,
              "timestampAdded": "1739448802",
              "meta": "0xff0a89c674ee7874a300590a932f2a20302e2063616c63756c6174652d696f202a2f200a7573696e672d776f7264732d66726f6d20307846653234313143446131393344394534653833413563323334433746643332303130313838336143203078393135453336656638383239343138313633353662433337313844663836383035344638363861440a616d6f756e742d65706f6368730a74726164652d65706f6368733a63616c6c3c323e28292c0a6d61782d6f75747075743a2063616c6c3c333e28616d6f756e742d65706f6368732074726164652d65706f636873292c0a696f3a2063616c6c3c343e2874726164652d65706f636873292c0a3a63616c6c3c353e28696f293b0a0a2f2a20312e2068616e646c652d696f202a2f200a6d696e2d616d6f756e743a206d756c283120302e39292c0a3a656e7375726528677265617465722d7468616e2d6f722d657175616c2d746f286f75747075742d7661756c742d64656372656173652829206d696e2d616d6f756e742920224d696e20747261646520616d6f756e742e22292c0a757365643a206765742868617368286f726465722d6861736828292022616d6f756e742d757365642229292c0a3a7365742868617368286f726465722d6861736828292022616d6f756e742d757365642229206164642875736564206f75747075742d7661756c742d6465637265617365282929293b0a0a2f2a20322e206765742d65706f6368202a2f200a696e697469616c2d74696d653a2063616c6c3c363e28292c0a6c6173742d74696d65205f3a2063616c6c3c373e28292c0a6475726174696f6e3a20737562286e6f77282920616e79286c6173742d74696d6520696e697469616c2d74696d6529292c0a746f74616c2d6475726174696f6e3a20737562286e6f77282920696e697469616c2d74696d65292c0a726174696f2d667265657a652d616d6f756e742d65706f6368733a2064697628312031292c0a726174696f2d667265657a652d74726164652d65706f6368733a206d756c28726174696f2d667265657a652d616d6f756e742d65706f63687320646976283630203138303029292c0a616d6f756e742d65706f6368733a2064697628746f74616c2d6475726174696f6e203630292c0a74726164652d65706f6368733a2073617475726174696e672d73756228646976286475726174696f6e20313830302920726174696f2d667265657a652d74726164652d65706f636873293b0a0a2f2a20332e20616d6f756e742d666f722d65706f6368202a2f200a616d6f756e742d65706f6368730a74726164652d65706f6368733a2c0a746f74616c2d617661696c61626c653a206c696e6561722d67726f7774682830203120616d6f756e742d65706f636873292c0a757365643a206765742868617368286f726465722d6861736828292022616d6f756e742d757365642229292c0a756e757365643a2073756228746f74616c2d617661696c61626c652075736564292c0a64656361793a2063616c6c3c383e2874726164652d65706f636873292c0a7368792d64656361793a20657665727928677265617465722d7468616e2874726164652d65706f63687320302e303529206465636179292c0a7661726961626c652d636f6d706f6e656e743a2073756228312031292c0a7461726765742d616d6f756e743a206164642831206d756c287661726961626c652d636f6d706f6e656e74207368792d646563617929292c0a6361707065642d756e757365643a206d696e28756e75736564207461726765742d616d6f756e74293b0a0a2f2a20342e20696f2d666f722d65706f6368202a2f200a65706f63683a2c0a6c6173742d696f3a2063616c6c3c373e28292c0a6d61782d6e6578742d74726164653a20616e79286d756c286c6173742d696f20312e3031292063616c6c3c393e2829292c0a626173656c696e652d6e6578742d74726164653a206d756c286c6173742d696f2030292c0a7265616c2d626173656c696e653a206d617828626173656c696e652d6e6578742d74726164652063616c6c3c393e2829292c0a7661726961626c652d636f6d706f6e656e743a2073617475726174696e672d737562286d61782d6e6578742d7472616465207265616c2d626173656c696e65292c0a61626f76652d626173656c696e653a206d756c287661726961626c652d636f6d706f6e656e742063616c6c3c383e2865706f636829292c0a5f3a20616464287265616c2d626173656c696e652061626f76652d626173656c696e65293b0a0a2f2a20352e207365742d6c6173742d7472616465202a2f200a6c6173742d696f3a2c0a3a7365742868617368286f726465722d68617368282920226c6173742d74726164652d74696d652229206e6f772829292c0a3a7365742868617368286f726465722d68617368282920226c6173742d74726164652d696f2229206c6173742d696f293b0a0a2f2a20362e206765742d696e697469616c2d74696d65202a2f200a5f3a6765742868617368286f726465722d6861736828292022696e697469616c2d74696d652229293b0a0a2f2a20372e206765742d6c6173742d7472616465202a2f200a6c6173742d74696d653a6765742868617368286f726465722d68617368282920226c6173742d74726164652d74696d652229292c0a6c6173742d696f3a6765742868617368286f726465722d68617368282920226c6173742d74726164652d696f2229293b0a0a2f2a20382e2068616c666c696665202a2f200a65706f63683a2c0a2f2a2a0a202a20536872696e6b696e6720746865206d756c7469706c696572206c696b6520746869730a202a207468656e206170706c79696e672069742031302074696d657320616c6c6f777320666f720a202a2062657474657220707265636973696f6e207768656e206d61782d696f2d726174696f0a202a2069732076657279206c617267652c20652e672e207e31653130206f72207e316532302b0a202a0a202a205468697320776f726b7320626563617573652060706f77657260206c6f7365730a202a20707265636973696f6e206f6e20626173652060302e3560207768656e207468650a202a206578706f6e656e74206973206c6172676520616e642063616e206576656e20676f0a202a20746f20603060207768696c652074686520696f2d726174696f206973207374696c6c0a202a206c617267652e2042657474657220746f206b65657020746865206d756c7469706c6965720a202a2068696768657220707265636973696f6e20616e642064726f702074686520696f2d726174696f0a202a20736d6f6f74686c7920666f72206173206c6f6e672061732077652063616e2e0a202a0a6d756c7469706c6965723a0a2020706f77657228302e35206469762865706f636820313029292c0a76616c3a0a20206d756c280a202020206d756c7469706c6965720a202020206d756c7469706c6965720a202020206d756c7469706c6965720a202020206d756c7469706c6965720a202020206d756c7469706c6965720a202020206d756c7469706c6965720a202020206d756c7469706c6965720a202020206d756c7469706c6965720a202020206d756c7469706c6965720a202020206d756c7469706c6965720a2020293b0a0a2f2a20392e2073666c722d626173656c696e652d696e76202a2f200a5f3a20696e762873666c722d65786368616e67652d726174652829293b011bff13109e41336ff20278186170706c69636174696f6e2f6f637465742d73747265616d",
              "addEvents": [
                {
                  "transaction": {
                    "id": "0xb5d715bc74b7a7f2aac8cca544c1c95e209ed4113b82269ac3285142324bc6af",
                    "from": "0xf08bcbce72f62c95dcb7c07dcb5ed26acfcfbc11",
                    "blockNumber": "37432554",
                    "timestamp": "1739448802"
                  }
                }
              ],
              "trades": [],
              "removeEvents": []
            })
        }
        fn get_order1() -> SgOrder {
            SgOrder {
            id: SgBytes("0x1a69eeb7970d3c8d5776493327fb262e31fc880c9cc4a951607418a7963d9fa1".to_string()),
            order_bytes: SgBytes("0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f08bcbce72f62c95dcb7c07dcb5ed26acfcfbc1100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000005c00000000000000000000000000000000000000000000000000000000000000640392c489ef67afdc348209452c338ea5ba2b6152b936e152f610d05e1a20621a40000000000000000000000005fb33d710f8b58de4c9fdec703b5c2487a5219d600000000000000000000000084c6e7f5a1e5dd89594cc25bef4722a1b8871ae60000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000049d000000000000000000000000000000000000000000000000000000000000000f0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000c7d713b49da0000914d696e20747261646520616d6f756e742e00000000000000000000000000008b616d6f756e742d75736564000000000000000000000000000000000000000000000000000000000000000000000000000000000000000340aad21b3b70000000000000000000000000000000000000000000000000006194049f30f7200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b1a2bc2ec500000000000000000000000000000000000000000000000000000e043da6172500008f6c6173742d74726164652d74696d65000000000000000000000000000000008d6c6173742d74726164652d696f0000000000000000000000000000000000008c696e697469616c2d74696d650000000000000000000000000000000000000000000000000000000000000000000000000000000000000006f05b59d3b200000000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000020000915e36ef882941816356bc3718df868054f868ad000000000000000000000000000000000000000000000000000000000000027d0a00000024007400e0015801b401e001f40218025c080500040b20000200100001001000000b120003001000010b110004001000030b0100051305000201100001011000003d120000011000020010000003100404211200001d02000001100003031000010c1200004911000003100404001000012b12000001100003031000010c1200004a0200001a0b00090b1000060b20000700100000001000011b1200001a10000047120000001000001a1000004712000001100000011000002e12000001100005011000042e120000001000053d12000001100004001000042e1200000010000601100005001000032e120000481200011d0b020a0010000001100000011000062713000001100003031000010c12000049110000001000030010000247120000001000010b110008001000050110000700100001201200001f12000001100000011000004712000000100006001000073d120000011000002b12000000100008001000043b120000160901080b1000070b10000901100008001000013d1200001b12000001100006001000013d1200000b100009001000033a120000001000040010000248120001001000000b110008001000053d12000000100006001000042b1200000a0401011a10000001100009031000010c1200004a020000001000000110000a031000010c1200004a020000040200010110000b031000010c120000491100000803000201100009031000010c120000491100000110000a031000010c12000049110000100c01030110000d001000002e1200000110000c3e1200000010000100100001001000010010000100100001001000010010000100100001001000013d1a0000020100010210000e3611000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001d80c49bbbcd1c0911346656b529df9e5c2f783d0000000000000000000000000000000000000000000000000000000000000012a6e3c06415539f92823a18ba63e1c0303040c4892970a0d1e3a27663d7583b33000000000000000000000000000000000000000000000000000000000000000100000000000000000000000012e605bc104e93b45e1ad99f9e555f659051c2bb0000000000000000000000000000000000000000000000000000000000000012a6e3c06415539f92823a18ba63e1c0303040c4892970a0d1e3a27663d7583b33".to_string()),
            order_hash: SgBytes("0x557147dd0daa80d5beff0023fe6a3505469b2b8c4406ce1ab873e1a652572dd4".to_string()),
            owner: SgBytes("0xf08bcbce72f62c95dcb7c07dcb5ed26acfcfbc11".to_string()),
            outputs: vec![SgVault {
                id: SgBytes("0x49f6b665c395c7b975caa2fc167cb5119981bbb86798bcaf3c4570153d09dfcf".to_string()),
                owner: SgBytes("0xf08bcbce72f62c95dcb7c07dcb5ed26acfcfbc11".to_string()),
                vault_id: SgBigInt("75486334982066122983501547829219246999490818941767825330875804445439814023987".to_string()),
                balance: SgBigInt("987000000000000000".to_string()),
                token: SgErc20 {
                    id: SgBytes("0x12e605bc104e93b45e1ad99f9e555f659051c2bb".to_string()),
                    address: SgBytes("0x12e605bc104e93b45e1ad99f9e555f659051c2bb".to_string()),
                    name: Some("Staked FLR".to_string()),
                    symbol: Some("sFLR".to_string()),
                    decimals: Some(SgBigInt("18".to_string())),
                },
                orderbook: SgOrderbook {
                    id: SgBytes("0xcee8cd002f151a536394e564b84076c41bbbcd4d".to_string()),
                },
                orders_as_output: vec![SgOrderAsIO {
                    id: SgBytes("0x1a69eeb7970d3c8d5776493327fb262e31fc880c9cc4a951607418a7963d9fa1".to_string()),
                    order_hash: SgBytes("0x557147dd0daa80d5beff0023fe6a3505469b2b8c4406ce1ab873e1a652572dd4".to_string()),
                    active: true,
                }],
                orders_as_input: vec![],
                balance_changes: vec![],
            },
            SgVault {
                id: SgBytes("0x0000000000000000000000000000000000000000".to_string()),
                token: SgErc20 {
                    id: SgBytes("0x0000000000000000000000000000000000000000".to_string()),
                    address: SgBytes("0x0000000000000000000000000000000000000000".to_string()),
                    name: Some("T1".to_string()),
                    symbol: Some("T1".to_string()),
                    decimals: Some(SgBigInt("0".to_string())),
                },
                balance: SgBigInt("0".to_string()),
                vault_id: SgBigInt("0".to_string()),
                owner: SgBytes("0x0000000000000000000000000000000000000000".to_string()),
                orders_as_output: vec![],
                orders_as_input: vec![],
                balance_changes: vec![],
                orderbook: SgOrderbook {
                    id: SgBytes("0x0000000000000000000000000000000000000000".to_string()),
                }
            }],
            inputs: vec![SgVault {
                id: SgBytes("0x538830b4f8cc03840cea5af799dc532be4363a3ee8f4c6123dbff7a0acc86dac".to_string()),
                owner: SgBytes("0xf08bcbce72f62c95dcb7c07dcb5ed26acfcfbc11".to_string()),
                vault_id: SgBigInt("75486334982066122983501547829219246999490818941767825330875804445439814023987".to_string()),
                balance: SgBigInt("797990000000000000".to_string()),
                token: SgErc20 {
                    id: SgBytes("0x1d80c49bbbcd1c0911346656b529df9e5c2f783d".to_string()),
                    address: SgBytes("0x1d80c49bbbcd1c0911346656b529df9e5c2f783d".to_string()),
                    name: Some("Wrapped Flare".to_string()),
                    symbol: Some("WFLR".to_string()),
                    decimals: Some(SgBigInt("18".to_string())),
                },
                orderbook: SgOrderbook {
                    id: SgBytes("0xcee8cd002f151a536394e564b84076c41bbbcd4d".to_string()),
                },
                orders_as_output: vec![],
                orders_as_input: vec![SgOrderAsIO {
                    id: SgBytes("0x1a69eeb7970d3c8d5776493327fb262e31fc880c9cc4a951607418a7963d9fa1".to_string()),
                    order_hash: SgBytes("0x557147dd0daa80d5beff0023fe6a3505469b2b8c4406ce1ab873e1a652572dd4".to_string()),
                    active: true,
                }],
                balance_changes: vec![],
            },
            SgVault {
                id: SgBytes("0x0000000000000000000000000000000000000000".to_string()),
                token: SgErc20 {
                    id: SgBytes("0x0000000000000000000000000000000000000000".to_string()),
                    address: SgBytes("0x0000000000000000000000000000000000000000".to_string()),
                    name: Some("T1".to_string()),
                    symbol: Some("T1".to_string()),
                    decimals: Some(SgBigInt("0".to_string())),
                },
                balance: SgBigInt("0".to_string()),
                vault_id: SgBigInt("0".to_string()),
                owner: SgBytes("0x0000000000000000000000000000000000000000".to_string()),
                orders_as_output: vec![],
                orders_as_input: vec![],
                balance_changes: vec![],
                orderbook: SgOrderbook {
                    id: SgBytes("0x0000000000000000000000000000000000000000".to_string()),
                }
            }],
            orderbook: SgOrderbook {
                id: SgBytes("0xcee8cd002f151a536394e564b84076c41bbbcd4d".to_string()),
            },
            active: true,
            timestamp_added: SgBigInt("1739448802".to_string()),
            meta: Some(SgBytes("0xff0a89c674ee7874a300590a932f2a20302e2063616c63756c6174652d696f202a2f200a7573696e672d776f7264732d66726f6d20307846653234313143446131393344394534653833413563323334433746643332303130313838336143203078393135453336656638383239343138313633353662433337313844663836383035344638363861440a616d6f756e742d65706f6368730a74726164652d65706f6368733a63616c6c3c323e28292c0a6d61782d6f75747075743a2063616c6c3c333e28616d6f756e742d65706f6368732074726164652d65706f636873292c0a696f3a2063616c6c3c343e2874726164652d65706f636873292c0a3a63616c6c3c353e28696f293b0a0a2f2a20312e2068616e646c652d696f202a2f200a6d696e2d616d6f756e743a206d756c283120302e39292c0a3a656e7375726528677265617465722d7468616e2d6f722d657175616c2d746f286f75747075742d7661756c742d64656372656173652829206d696e2d616d6f756e742920224d696e20747261646520616d6f756e742e22292c0a757365643a206765742868617368286f726465722d6861736828292022616d6f756e742d757365642229292c0a3a7365742868617368286f726465722d6861736828292022616d6f756e742d757365642229206164642875736564206f75747075742d7661756c742d6465637265617365282929293b0a0a2f2a20322e206765742d65706f6368202a2f200a696e697469616c2d74696d653a2063616c6c3c363e28292c0a6c6173742d74696d65205f3a2063616c6c3c373e28292c0a6475726174696f6e3a20737562286e6f77282920616e79286c6173742d74696d6520696e697469616c2d74696d652929292c0a746f74616c2d6475726174696f6e3a20737562286e6f77282920696e697469616c2d74696d65292c0a726174696f2d667265657a652d616d6f756e742d65706f6368733a2064697628312031292c0a726174696f2d667265657a652d74726164652d65706f6368733a206d756c28726174696f2d667265657a652d616d6f756e742d65706f63687320646976283630203138303029292c0a616d6f756e742d65706f6368733a2064697628746f74616c2d6475726174696f6e203630292c0a74726164652d65706f6368733a2073617475726174696e672d73756228646976286475726174696f6e20313830302920726174696f2d667265657a652d74726164652d65706f636873293b0a0a2f2a20332e20616d6f756e742d666f722d65706f6368202a2f200a616d6f756e742d65706f6368730a74726164652d65706f6368733a2c0a746f74616c2d617661696c61626c653a206c696e6561722d67726f7774682830203120616d6f756e742d65706f636873292c0a757365643a206765742868617368286f726465722d6861736828292022616d6f756e742d757365642229292c0a756e757365643a2073756228746f74616c2d617661696c61626c652075736564292c0a64656361793a2063616c6c3c383e2874726164652d65706f636873292c0a7368792d64656361793a20657665727928677265617465722d7468616e2874726164652d65706f63687320302e303529206465636179292c0a7661726961626c652d636f6d706f6e656e743a2073756228312031292c0a7461726765742d616d6f756e743a206164642831206d756c287661726961626c652d636f6d706f6e656e74207368792d646563617929292c0a6361707065642d756e757365643a206d696e28756e75736564207461726765742d616d6f756e74293b0a0a2f2a20342e20696f2d666f722d65706f6368202a2f200a65706f63683a2c0a6c6173742d696f3a2063616c6c3c373e28292c0a6d61782d6e6578742d74726164653a20616e79286d756c286c6173742d696f20312e3031292063616c6c3c393e2829292c0a626173656c696e652d6e6578742d74726164653a206d756c286c6173742d696f2030292c0a7265616c2d626173656c696e653a206d617828626173656c696e652d6e6578742d74726164652063616c6c3c393e2829292c0a7661726961626c652d636f6d706f6e656e743a2073617475726174696e672d737562286d61782d6e6578742d7472616465207265616c2d626173656c696e65292c0a61626f76652d626173656c696e653a206d756c287661726961626c652d636f6d706f6e656e742063616c6c3c383e2865706f636829292c0a5f3a20616464287265616c2d626173656c696e652061626f76652d626173656c696e65293b0a0a2f2a20352e207365742d6c6173742d7472616465202a2f200a6c6173742d696f3a2c0a3a7365742868617368286f726465722d68617368282920226c6173742d74726164652d74696d652229206e6f772829292c0a3a7365742868617368286f726465722d68617368282920226c6173742d74726164652d696f2229206c6173742d696f293b0a0a2f2a20362e206765742d696e697469616c2d74696d65202a2f200a5f3a6765742868617368286f726465722d6861736828292022696e697469616c2d74696d652229293b0a0a2f2a20372e206765742d6c6173742d7472616465202a2f200a6c6173742d74696d653a6765742868617368286f726465722d68617368282920226c6173742d74726164652d74696d652229292c0a6c6173742d696f3a6765742868617368286f726465722d68617368282920226c6173742d74726164652d696f2229293b0a0a2f2a20382e2068616c666c696665202a2f200a65706f63683a2c0a2f2a2a0a202a20536872696e6b696e6720746865206d756c7469706c696572206c696b6520746869730a202a207468656e206170706c79696e672069742031302074696d657320616c6c6f777320666f720a202a2062657474657220707265636973696f6e207768656e206d61782d696f2d726174696f0a202a2069732076657279206c617267652c20652e672e207e31653130206f72207e316532302b0a202a0a202a205468697320776f726b7320626563617573652060706f77657260206c6f7365730a202a20707265636973696f6e206f6e20626173652060302e3560207768656e207468650a202a206578706f6e656e74206973206c6172676520616e642063616e206576656e20676f0a202a20746f20603060207768696c652074686520696f2d726174696f206973207374696c6c0a202a206c617267652e2042657474657220746f206b65657020746865206d756c7469706c6965720a202a2068696768657220707265636973696f6e20616e642064726f702074686520696f2d726174696f0a202a20736d6f6f74686c7920666f72206173206c6f6e672061732077652063616e2e0a202a0a6d756c7469706c6965723a0a2020706f77657228302e35206469762865706f636820313029292c0a76616c3a0a20206d756c280a202020206d756c7469706c6965720a202020206d756c7469706c6965720a202020206d756c7469706c6965720a202020206d756c7469706c6965720a202020206d756c7469706c6965720a202020206d756c7469706c6965720a202020206d756c7469706c6965720a202020206d756c7469706c6965720a202020206d756c7469706c6965720a202020206d756c7469706c6965720a2020293b0a0a2f2a20392e2073666c722d626173656c696e652d696e76202a2f200a5f3a20696e762873666c722d65786368616e67652d726174652829293b011bff13109e41336ff20278186170706c69636174696f6e2f6f637465742d73747265616d".to_string())),
            add_events: vec![SgAddOrder {
                transaction: SgTransaction {
                    id: SgBytes("0xb5d715bc74b7a7f2aac8cca544c1c95e209ed4113b82269ac3285142324bc6af".to_string()),
                    from: SgBytes("0xf08bcbce72f62c95dcb7c07dcb5ed26acfcfbc11".to_string()),
                    block_number: SgBigInt("37432554".to_string()),
                    timestamp: SgBigInt("1739448802".to_string()),
                },
            }],
            trades: vec![],
            remove_events: vec![],
        }
        }
        fn get_trades_json() -> Value {
            json!([
              {
                "id": "trade1",
                "tradeEvent": {
                  "transaction": {
                    "id": "tx1",
                    "from": "from1",
                    "blockNumber": "0",
                    "timestamp": "0"
                  },
                  "sender": "sender1"
                },
                "outputVaultBalanceChange": {
                  "id": "ovbc1",
                  "__typename": "TradeVaultBalanceChange",
                  "amount": "-2",
                  "newVaultBalance": "0",
                  "oldVaultBalance": "0",
                  "vault": {
                    "id": "vault1",
                    "vaultId": "1",
                    "token": {
                      "id": "0x12e605bc104e93b45e1ad99f9e555f659051c2bb",
                      "address": "0x12e605bc104e93b45e1ad99f9e555f659051c2bb",
                      "name": "Staked FLR",
                      "symbol": "sFLR",
                      "decimals": "18"
                    }
                  },
                  "timestamp": "1700000000",
                  "transaction": {
                    "id": "tx1",
                    "from": "from1",
                    "blockNumber": "0",
                    "timestamp": "1700000000"
                  },
                  "orderbook": {
                    "id": "ob1"
                  }
                },
                "order": {
                  "id": "order1",
                  "orderHash": "hash1"
                },
                "inputVaultBalanceChange": {
                  "id": "ivbc1",
                  "__typename": "TradeVaultBalanceChange",
                  "amount": "1",
                  "newVaultBalance": "0",
                  "oldVaultBalance": "0",
                  "vault": {
                    "id": "vault1",
                    "vaultId": "1",
                    "token": {
                      "id": "0x1d80c49bbbcd1c0911346656b529df9e5c2f783d",
                      "address": "0x1d80c49bbbcd1c0911346656b529df9e5c2f783d",
                      "name": "Wrapped Flare",
                      "symbol": "WFLR",
                      "decimals": "18"
                    }
                  },
                  "timestamp": "1700000000",
                  "transaction": {
                    "id": "tx1",
                    "from": "from1",
                    "blockNumber": "0",
                    "timestamp": "1700000000"
                  },
                  "orderbook": {
                    "id": "ob1"
                  }
                },
                "timestamp": "0",
                "orderbook": {
                  "id": "ob1"
                }
              },
              {
                "id": "trade2",
                "tradeEvent": {
                  "transaction": {
                    "id": "tx2",
                    "from": "from2",
                    "blockNumber": "0",
                    "timestamp": "0"
                  },
                  "sender": "sender2"
                },
                "outputVaultBalanceChange": {
                  "id": "ovbc2",
                  "__typename": "TradeVaultBalanceChange",
                  "amount": "-5",
                  "newVaultBalance": "0",
                  "oldVaultBalance": "0",
                  "vault": {
                    "id": "vault2",
                    "vaultId": "2",
                    "token": {
                      "id": "0x12e605bc104e93b45e1ad99f9e555f659051c2bb",
                      "address": "0x12e605bc104e93b45e1ad99f9e555f659051c2bb",
                      "name": "Staked FLR",
                      "symbol": "sFLR",
                      "decimals": "18"
                    }
                  },
                  "timestamp": "1700086400",
                  "transaction": {
                    "id": "tx2",
                    "from": "from2",
                    "blockNumber": "0",
                    "timestamp": "1700086400"
                  },
                  "orderbook": {
                    "id": "ob2"
                  }
                },
                "order": {
                  "id": "order2",
                  "orderHash": "hash2"
                },
                "inputVaultBalanceChange": {
                  "id": "ivbc2",
                  "__typename": "TradeVaultBalanceChange",
                  "amount": "2",
                  "newVaultBalance": "0",
                  "oldVaultBalance": "0",
                  "vault": {
                    "id": "vault2",
                    "vaultId": "2",
                    "token": {
                      "id": "0x1d80c49bbbcd1c0911346656b529df9e5c2f783d",
                      "address": "0x1d80c49bbbcd1c0911346656b529df9e5c2f783d",
                      "name": "Wrapped Flare",
                      "symbol": "WFLR",
                      "decimals": "18"
                    }
                  },
                  "timestamp": "0",
                  "transaction": {
                    "id": "tx2",
                    "from": "from2",
                    "blockNumber": "0",
                    "timestamp": "1700086400"
                  },
                  "orderbook": {
                    "id": "ob2"
                  }
                },
                "timestamp": "1700086400",
                "orderbook": {
                  "id": "ob2"
                }
              }
            ])
        }

        #[tokio::test]
        async fn test_get_orders() {
            let sg_server = MockServer::start_async().await;

            sg_server.mock(|when, then| {
                when.path("/sg1");
                then.status(200).json_body_obj(&json!({
                  "data": {
                    "orders": [
                      get_order1_json()
                    ]
                  }
                }));
            });
            sg_server.mock(|when, then| {
                when.path("/sg2");
                then.status(200).json_body_obj(&json!({
                    "data": {
                      "orders": [
                        {
                          "id": "order2",
                          "orderBytes": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                          "orderHash": "0x2",
                          "owner": "0x0000000000000000000000000000000000000000",
                          "outputs": [
                            {
                              "id": "0x0000000000000000000000000000000000000000",
                              "token": {
                                "id": "0x0000000000000000000000000000000000000000",
                                "address": "0x0000000000000000000000000000000000000000",
                                "name": "T1",
                                "symbol": "T1",
                                "decimals": "0"
                              },
                              "balance": "0",
                              "vaultId": "0",
                              "owner": "0x0000000000000000000000000000000000000000",
                              "ordersAsOutput": [],
                              "ordersAsInput": [],
                              "balanceChanges": [],
                              "orderbook": {
                                "id": "0x0000000000000000000000000000000000000000"
                              }
                            }
                          ],
                          "inputs": [
                            {
                              "id": "0x0000000000000000000000000000000000000000",
                              "token": {
                                "id": "0x0000000000000000000000000000000000000000",
                                "address": "0x0000000000000000000000000000000000000000",
                                "name": "T2",
                                "symbol": "T2",
                                "decimals": "0"
                              },
                              "balance": "0",
                              "vaultId": "0",
                              "owner": "0x0000000000000000000000000000000000000000",
                              "ordersAsOutput": [],
                              "ordersAsInput": [],
                              "balanceChanges": [],
                              "orderbook": {
                                "id": "0x0000000000000000000000000000000000000000"
                              }
                            }
                          ],
                          "active": true,
                          "addEvents": [
                            {
                              "transaction": {
                                "blockNumber": "0",
                                "timestamp": "0",
                                "id": "0x0000000000000000000000000000000000000000",
                                "from": "0x0000000000000000000000000000000000000000"
                              }
                            }
                          ],
                          "meta": null,
                          "timestampAdded": "0",
                          "orderbook": {
                            "id": "0x0000000000000000000000000000000000000000"
                          },
                          "trades": [],
                          "removeEvents": []
                        }
                      ]
                    }
                  }));
            });

            let subgraphs = vec![
                MultiSubgraphArgs {
                    url: Url::parse(&sg_server.url("/sg1")).unwrap(),
                    name: "network-one".to_string(),
                },
                MultiSubgraphArgs {
                    url: Url::parse(&sg_server.url("/sg2")).unwrap(),
                    name: "network-two".to_string(),
                },
            ];
            let filter_args = SgOrdersListFilterArgs {
                owners: vec![],
                active: None,
                order_hash: None,
            };
            let pagination_args = SgPaginationArgs {
                page: 1,
                page_size: 10,
            };
            let result = get_orders(subgraphs, filter_args, pagination_args)
                .await
                .unwrap();

            assert_eq!(result.0.len(), 2);

            let expected_order1 = get_order1();
            assert_eq!(result.0[0].subgraph_name, "network-one");
            let order1 = result.0[0].order.clone();
            assert_eq!(order1.id, expected_order1.id);
            assert_eq!(order1.order_bytes, expected_order1.order_bytes);
            assert_eq!(order1.order_hash, expected_order1.order_hash);
            assert_eq!(order1.owner, expected_order1.owner);
            assert_eq!(order1.outputs.len(), expected_order1.outputs.len());
            for (order1_output, expected_output) in
                order1.outputs.iter().zip(expected_order1.outputs.iter())
            {
                assert_eq!(order1_output.id, expected_output.id);
                assert_eq!(order1_output.owner, expected_output.owner);
                assert_eq!(order1_output.vault_id, expected_output.vault_id);
                assert_eq!(order1_output.token.id, expected_output.token.id);
                assert_eq!(order1_output.token.address, expected_output.token.address);
                assert_eq!(order1_output.token.name, expected_output.token.name);
                assert_eq!(order1_output.token.symbol, expected_output.token.symbol);
                assert_eq!(order1_output.token.decimals, expected_output.token.decimals);
                assert_eq!(order1_output.orderbook.id, expected_output.orderbook.id);
            }
            assert_eq!(order1.inputs.len(), expected_order1.inputs.len());
            for (order1_input, expected_input) in
                order1.inputs.iter().zip(expected_order1.inputs.iter())
            {
                assert_eq!(order1_input.id, expected_input.id);
                assert_eq!(order1_input.owner, expected_input.owner);
                assert_eq!(order1_input.vault_id, expected_input.vault_id);
                assert_eq!(order1_input.token.id, expected_input.token.id);
                assert_eq!(order1_input.token.address, expected_input.token.address);
                assert_eq!(order1_input.token.name, expected_input.token.name);
                assert_eq!(order1_input.token.symbol, expected_input.token.symbol);
                assert_eq!(order1_input.token.decimals, expected_input.token.decimals);
                assert_eq!(order1_input.orderbook.id, expected_input.orderbook.id);
            }

            assert_eq!(order1.orderbook.id, expected_order1.orderbook.id);
            assert_eq!(order1.timestamp_added, expected_order1.timestamp_added);

            assert_eq!(result.0[1].subgraph_name, "network-two");
            let order2 = result.0[1].order.clone();
            assert_eq!(order2.id.0, "order2".to_string());
            assert_eq!(order2.order_bytes.0, "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001ato_string());
            assert_eq!(order2.order_hash.0, "0x2".to_string());
            assert_eq!(
                order2.owner.0,
                "0x0000000000000000000000000000000000000000".to_string()
            );
            assert_eq!(order2.outputs.len(), 1);
            let order2_outputs = order2.outputs[0].clone();
            assert_eq!(
                order2_outputs.id.0,
                "0x0000000000000000000000000000000000000000".to_string()
            );
            assert_eq!(
                order2_outputs.owner.0,
                "0x0000000000000000000000000000000000000000".to_string()
            );
            assert_eq!(order2_outputs.vault_id.0, "0".to_string());
            assert_eq!(
                order2_outputs.token.id.0,
                "0x0000000000000000000000000000000000000000".to_string()
            );
            assert_eq!(
                order2_outputs.token.address.0,
                "0x0000000000000000000000000000000000000000".to_string()
            );
            assert_eq!(order2_outputs.token.name, Some("T1".to_string()));
            assert_eq!(order2_outputs.token.symbol, Some("T1".to_string()));
            assert_eq!(
                order2_outputs.token.decimals,
                Some(SgBigInt("0".to_string()))
            );
            assert_eq!(
                order2_outputs.orderbook.id.0,
                "0x0000000000000000000000000000000000000000".to_string()
            );

            assert_eq!(order2.inputs.len(), 1);
            let order2_inputs = order2.inputs[0].clone();
            assert_eq!(
                order2_inputs.id.0,
                "0x0000000000000000000000000000000000000000".to_string()
            );
            assert_eq!(
                order2_inputs.owner.0,
                "0x0000000000000000000000000000000000000000".to_string()
            );
            assert_eq!(order2_inputs.vault_id.0, "0".to_string());
            assert_eq!(
                order2_inputs.token.id.0,
                "0x0000000000000000000000000000000000000000".to_string()
            );
            assert_eq!(
                order2_inputs.token.address.0,
                "0x0000000000000000000000000000000000000000".to_string()
            );
            assert_eq!(order2_inputs.token.name, Some("T2".to_string()));
            assert_eq!(order2_inputs.token.symbol, Some("T2".to_string()));
            assert_eq!(
                order2_inputs.token.decimals,
                Some(SgBigInt("0".to_string()))
            );
            assert_eq!(
                order2_inputs.orderbook.id.0,
                "0x0000000000000000000000000000000000000000".to_string()
            );
            assert_eq!(
                order2.orderbook.id.0,
                "0x0000000000000000000000000000000000000000".to_string()
            );
            assert_eq!(order2.timestamp_added.0, "0".to_string());
        }

        #[tokio::test]
        async fn test_get_order_by_hash() {
            let sg_server = MockServer::start_async().await;
            sg_server.mock(|when, then| {
                when.path("/sg1");
                then.status(200).json_body_obj(&json!({
                    "data": {
                        "orders": [get_order1_json()]
                    }
                }));
            });

            let res = get_order_by_hash(&sg_server.url("/sg1"), "hash")
                .await
                .unwrap();

            let expected_order = get_order1();
            assert_eq!(res.order.id, expected_order.id);
            assert_eq!(res.order.order_bytes, expected_order.order_bytes);
            assert_eq!(res.order.order_hash, expected_order.order_hash);
            assert_eq!(res.order.owner, expected_order.owner);
            assert_eq!(res.order.outputs.len(), 2);
            assert_eq!(res.order.inputs.len(), 2);

            assert_eq!(res.vaults.len(), 3);
            assert_eq!(
                res.vaults.get("outputs").unwrap()[0].id,
                expected_order.outputs[0].id
            );
            assert_eq!(
                res.vaults.get("inputs").unwrap()[0].id,
                expected_order.inputs[0].id
            );
            assert_eq!(
                res.vaults.get("inputs_outputs").unwrap()[0].id.0,
                expected_order.inputs[1].id.0
            );
            assert_eq!(
                res.vaults.get("inputs_outputs").unwrap()[0].id.0,
                expected_order.outputs[1].id.0
            );
        }

        #[tokio::test]
        async fn test_order_detail_extended() {
            let sg_server = MockServer::start_async().await;
            sg_server.mock(|when, then| {
                when.path("/sg");
                then.status(200).json_body_obj(&json!({
                    "data": {
                        "orders": [get_order1_json()]
                    }
                }));
            });

            let res = order_detail_extended(get_order1()).unwrap();
            assert_eq!(res.order.id, get_order1().id);
            assert_eq!(res.order.order_bytes, get_order1().order_bytes);
            assert_eq!(res.order.order_hash, get_order1().order_hash);
            assert_eq!(res.order.owner, get_order1().owner);
            assert_eq!(res.order.outputs.len(), 2);
            assert_eq!(res.order.inputs.len(), 2);

            assert_eq!(res.rainlang, Some("/* 0. calculate-io */ \nusing-words-from 0xFe2411CDa193D9E4e83A5c234C7Fd320101883aC 0x915E36ef882941816356bC3718Df868054F868aD\namount-epochs\ntrade-epochs:call<2>(),\nmax-output: call<3>(amount-epochs trade-epochs),\nio: call<4>(trade-epochs),\n:call<5>(io);\n\n/* 1. handle-io */ \nmin-amount: mul(1 0.9),\n:ensure(greater-than-or-equal-to(output-vault-decrease() min-amount) \"Min trade amount.\"),\nused: get(hash(order-hash() \"amount-used\")),\n:set(hash(order-hash() \"amount-used\") add(used output-vault-decrease()));\n\n/* 2. get-epoch */ \ninitial-time: call<6>(),\nlast-time _: call<7>(),\nduration: sub(now() any(last-time initial-time))),\ntotal-duration: sub(now() initial-time),\nratio-freeze-amount-epochs: div(1 1),\nratio-freeze-trade-epochs: mul(ratio-freeze-amount-epochs div(60 1800)),\namount-epochs: div(total-duration 60),\ntrade-epochs: saturating-sub(div(duration 1800) ratio-freeze-trade-epochs);\n\n/* 3. amount-for-epoch */ \namount-epochs\ntrade-epochs:,\ntotal-available: linear-growth(0 1 amount-epochs),\nused: get(hash(order-hash() \"amount-used\")),\nunused: sub(total-available used),\ndecay: call<8>(trade-epochs),\nshy-decay: every(greater-than(trade-epochs 0.05) decay),\nvariable-component: sub(1 1),\ntarget-amount: add(1 mul(variable-component shy-decay)),\ncapped-unused: min(unused target-amount);\n\n/* 4. io-for-epoch */ \nepoch:,\nlast-io: call<7>(),\nmax-next-trade: any(mul(last-io 1.01) call<9>()),\nbaseline-next-trade: mul(last-io 0),\nreal-baseline: max(baseline-next-trade call<9>()),\nvariable-component: saturating-sub(max-next-trade real-baseline),\nabove-baseline: mul(variable-component call<8>(epoch)),\n_: add(real-baseline above-baseline);\n\n/* 5. set-last-trade */ \nlast-io:,\n:set(hash(order-hash() \"last-trade-time\") now()),\n:set(hash(order-hash() \"last-trade-io\") last-io);\n\n/* 6. get-initial-time */ \n_:get(hash(order-hash() \"initial-time\"));\n\n/* 7. get-last-trade */ \nlast-time:get(hash(order-hash() \"last-trade-time\")),\nlast-io:get(hash(order-hash() \"last-trade-io\"));\n\n/* 8. halflife */ \nepoch:,\n/**\n * Shrinking the multiplier like this\n * then applying it 10 times allows for\n * better precision when max-io-ratio\n * is very large, e.g. ~1e10 or ~1e20+\n *\n * This works because `power` loses\n * precision on base `0.5` when the\n * exponent is large and can even go\n * to `0` while the io-ratio is still\n * large. Better to keep the multiplier\n * higher precision and drop the io-ratio\n * smoothly for as long as we can.\n *\nmultiplier:\n  power(0.5 div(epoch 10)),\nval:\n  mul(\n    multiplier\n    multiplier\n    multiplier\n    multiplier\n    multiplier\n    multiplier\n    multiplier\n    multiplier\n    multiplier\n    multiplier\n  );\n\n/* 9. sflr-baseline-inv */ \n_: inv(sflr-exchange-rate());".to_string()));
        }

        #[tokio::test]
        async fn test_order_vaults_volume() {
            let sg_server = MockServer::start_async().await;
            sg_server.mock(|when, then| {
                when.path("/sg")
                    .body_contains("\"first\":200")
                    .body_contains("\"skip\":0");
                then.status(200).json_body_obj(&json!({
                  "data": {
                    "trades": get_trades_json()
                  }
                }));
            });
            sg_server.mock(|when, then| {
                when.path("/sg")
                    .body_contains("\"first\":200")
                    .body_contains("\"skip\":200");
                then.status(200).json_body_obj(&json!({
                    "data": { "trades": [] }
                }));
            });

            let res = order_vaults_volume(&sg_server.url("/sg"), "hash", None, None)
                .await
                .unwrap();

            assert_eq!(res.0.len(), 4);

            let volume1 = res.0[0].clone();
            assert_eq!(volume1.id, "1");
            assert_eq!(
                volume1.token.address.0,
                "0x1d80c49bbbcd1c0911346656b529df9e5c2f783d"
            );
            assert_eq!(volume1.token.name, Some("Wrapped Flare".to_string()));
            assert_eq!(volume1.token.symbol, Some("WFLR".to_string()));
            assert_eq!(volume1.token.decimals, Some(SgBigInt("18".to_string())));
            assert_eq!(
                volume1.vol_details,
                VolumeDetails {
                    total_in: U256::from(1),
                    total_out: U256::from(0),
                    total_vol: U256::from(1),
                    net_vol: U256::from(1),
                }
            );

            let volume2 = res.0[1].clone();
            assert_eq!(volume2.id, "1");
            assert_eq!(
                volume2.token.address.0,
                "0x12e605bc104e93b45e1ad99f9e555f659051c2bb"
            );
            assert_eq!(volume2.token.name, Some("Staked FLR".to_string()));
            assert_eq!(volume2.token.symbol, Some("sFLR".to_string()));
            assert_eq!(volume2.token.decimals, Some(SgBigInt("18".to_string())));
            assert_eq!(
                volume2.vol_details,
                VolumeDetails {
                    total_in: U256::from(0),
                    total_out: U256::from(2),
                    total_vol: U256::from(2),
                    net_vol: U256::from(2),
                }
            );

            let volume3 = res.0[2].clone();
            assert_eq!(volume3.id, "2");
            assert_eq!(
                volume3.token.address.0,
                "0x1d80c49bbbcd1c0911346656b529df9e5c2f783d"
            );
            assert_eq!(volume3.token.name, Some("Wrapped Flare".to_string()));
            assert_eq!(volume3.token.symbol, Some("WFLR".to_string()));
            assert_eq!(volume3.token.decimals, Some(SgBigInt("18".to_string())));
            assert_eq!(
                volume3.vol_details,
                VolumeDetails {
                    total_in: U256::from(2),
                    total_out: U256::from(0),
                    total_vol: U256::from(2),
                    net_vol: U256::from(2),
                }
            );

            let volume4 = res.0[3].clone();
            assert_eq!(volume4.id, "2");
            assert_eq!(
                volume4.token.address.0,
                "0x12e605bc104e93b45e1ad99f9e555f659051c2bb"
            );
            assert_eq!(volume4.token.name, Some("Staked FLR".to_string()));
            assert_eq!(volume4.token.symbol, Some("sFLR".to_string()));
            assert_eq!(volume4.token.decimals, Some(SgBigInt("18".to_string())));
            assert_eq!(
                volume4.vol_details,
                VolumeDetails {
                    total_in: U256::from(0),
                    total_out: U256::from(5),
                    total_vol: U256::from(5),
                    net_vol: U256::from(5),
                }
            );
        }

        #[tokio::test]
        async fn test_order_performance() {
            let sg_server = MockServer::start_async().await;
            sg_server.mock(|when, then| {
                when.path("/sg").body_contains("SgOrderDetailByIdQuery");
                then.status(200).json_body_obj(&json!({
                  "data": {
                    "order": {
                      "id": "order1",
                      "orderBytes": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001a
                      "orderHash": "0x1",
                      "owner": "0x0000000000000000000000000000000000000000",
                      "outputs": [
                        {
                          "id": "0x0000000000000000000000000000000000000000",
                          "token": {
                            "id": "token-1",
                            "address": "0x1111111111111111111111111111111111111111",
                            "name": "Token One",
                            "symbol": "TK1",
                            "decimals": "18"
                          },
                          "balance": "0",
                          "vaultId": "1",
                          "owner": "0x0000000000000000000000000000000000000000",
                          "ordersAsOutput": [],
                          "ordersAsInput": [],
                          "balanceChanges": [],
                          "orderbook": {
                            "id": "0x0000000000000000000000000000000000000000"
                          }
                        }
                      ],
                      "inputs": [
                        {
                          "id": "0x0000000000000000000000000000000000000000",
                          "token": {
                            "id": "token-2",
                            "address": "0x2222222222222222222222222222222222222222",
                            "name": "Token Two",
                            "symbol": "TK2",
                            "decimals": "18"
                          },
                          "balance": "0",
                          "vaultId": "2",
                          "owner": "0x0000000000000000000000000000000000000000",
                          "ordersAsOutput": [],
                          "ordersAsInput": [],
                          "balanceChanges": [],
                          "orderbook": {
                            "id": "0x0000000000000000000000000000000000000000"
                          }
                        }
                      ],
                      "active": true,
                      "addEvents": [
                        {
                          "transaction": {
                            "blockNumber": "0",
                            "timestamp": "0",
                            "id": "0x0000000000000000000000000000000000000000",
                            "from": "0x0000000000000000000000000000000000000000"
                          }
                        }
                      ],
                      "meta": null,
                      "timestampAdded": "0",
                      "orderbook": {
                        "id": "0x0000000000000000000000000000000000000000"
                      },
                      "trades": [],
                      "removeEvents": []
                    }
                  }
                }));
            });
            sg_server.mock(|when, then| {
                when.path("/sg")
                    .body_contains("\"first\":200")
                    .body_contains("\"skip\":0");
                then.status(200).json_body_obj(&json!({
                  "data": {
                    "trades": [
                      {
                        "id": "0x07db8b3f3e7498f9d4d0e40b98f57c020d3d277516e86023a8200a20464d4894",
                        "timestamp": "1632000000",
                        "tradeEvent": {
                          "sender": "0x0000000000000000000000000000000000000000",
                          "transaction": {
                            "id": "0x0000000000000000000000000000000000000000",
                            "from": "0x0000000000000000000000000000000000000000",
                            "timestamp": "1632000000",
                            "blockNumber": "0"
                          }
                        },
                        "outputVaultBalanceChange": {
                          "amount": "-100000000000000000000",
                          "vault": {
                            "id": "vault-1",
                            "vaultId": "1",
                            "token": {
                              "id": "token-1",
                              "address": "0x1111111111111111111111111111111111111111",
                              "name": "Token One",
                              "symbol": "TK1",
                              "decimals": "18"
                            }
                          },
                          "id": "output-change-1",
                          "__typename": "TradeVaultBalanceChange",
                          "newVaultBalance": "900",
                          "oldVaultBalance": "1000",
                          "timestamp": "1632000000",
                          "transaction": {
                            "id": "0x0000000000000000000000000000000000000000",
                            "from": "0x0000000000000000000000000000000000000000",
                            "timestamp": "1632000000",
                            "blockNumber": "0"
                          },
                          "orderbook": {
                            "id": "orderbook-1"
                          }
                        },
                        "order": {
                          "id": "order1.id",
                          "orderHash": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
                        },
                        "inputVaultBalanceChange": {
                          "amount": "50000000000000000000",
                          "vault": {
                            "id": "vault-2",
                            "vaultId": "2",
                            "token": {
                              "id": "token-2",
                              "address": "0x2222222222222222222222222222222222222222",
                              "name": "Token Two",
                              "symbol": "TK2",
                              "decimals": "18"
                            }
                          },
                          "id": "input-change-1",
                          "__typename": "TradeVaultBalanceChange",
                          "newVaultBalance": "150",
                          "oldVaultBalance": "100",
                          "timestamp": "1632000000",
                          "transaction": {
                            "id": "0x0000000000000000000000000000000000000000",
                            "from": "0x0000000000000000000000000000000000000000",
                            "timestamp": "1632000000",
                            "blockNumber": "0"
                          },
                          "orderbook": {
                            "id": "orderbook-1"
                          }
                        },
                        "orderbook": {
                          "id": "orderbook-1"
                        }
                      }
                    ]
                  }
                }));
            });
            sg_server.mock(|when, then| {
                when.path("/sg")
                    .body_contains("\"first\":200")
                    .body_contains("\"skip\":200");
                then.status(200).json_body_obj(&json!({
                    "data": { "trades": [] }
                }));
            });

            let res = order_performance(
                &sg_server.url("/sg"),
                "hash",
                Some(1632000000),
                Some(1734571449),
            )
            .await
            .unwrap();

            assert_eq!(res.order_id, "order1");
            assert_eq!(res.order_hash, "0x1");
            assert_eq!(res.orderbook, "0x0000000000000000000000000000000000000000");
            assert_eq!(
                res.denominated_performance,
                Some(DenominatedPerformance {
                    token: SgErc20 {
                        id: SgBytes("token-2".to_string()),
                        address: SgBytes("0x2222222222222222222222222222222222222222".to_string()),
                        name: Some("Token Two".to_string()),
                        symbol: Some("TK2".to_string()),
                        decimals: Some(SgBigInt("18".to_string())),
                    },
                    apy: U256::from(0),
                    apy_is_neg: false,
                    net_vol: U256::from(0),
                    net_vol_is_neg: false,
                    starting_capital: U256::from(600),
                })
            );
            assert_eq!(res.start_time, 1632000000);
            assert_eq!(res.end_time, 1734571449);
            assert_eq!(res.inputs_vaults.len(), 1);
            assert_eq!(
                res.inputs_vaults[0],
                VaultPerformance {
                    id: "2".to_string(),
                    token: SgErc20 {
                        id: SgBytes("token-2".to_string()),
                        address: SgBytes("0x2222222222222222222222222222222222222222".to_string()),
                        name: Some("Token Two".to_string()),
                        symbol: Some("TK2".to_string()),
                        decimals: Some(SgBigInt("18".to_string())),
                    },
                    vol_details: VolumeDetails {
                        total_in: U256::from(50000000000000000000u128),
                        total_out: U256::from(0u8),
                        total_vol: U256::from(50000000000000000000u128),
                        net_vol: U256::from(50000000000000000000u128),
                    },
                    apy_details: Some(APYDetails {
                        start_time: 1632000000,
                        end_time: 1734571449,
                        net_vol: U256::from(50000000000000000000u128),
                        capital: U256::from(150u8),
                        apy: Some(U256::from(102484659254448087225972733172491493u128)),
                        is_neg: false,
                    }),
                }
            );
            assert_eq!(res.outputs_vaults.len(), 1);
            assert_eq!(
                res.outputs_vaults[0],
                VaultPerformance {
                    id: "1".to_string(),
                    token: SgErc20 {
                        id: SgBytes("token-1".to_string()),
                        address: SgBytes("0x1111111111111111111111111111111111111111".to_string()),
                        name: Some("Token One".to_string()),
                        symbol: Some("TK1".to_string()),
                        decimals: Some(SgBigInt("18".to_string())),
                    },
                    vol_details: VolumeDetails {
                        total_in: U256::from(0),
                        total_out: U256::from(100000000000000000000u128),
                        total_vol: U256::from(100000000000000000000u128),
                        net_vol: U256::from(100000000000000000000u128),
                    },
                    apy_details: Some(APYDetails {
                        start_time: 1632000000,
                        end_time: 1734571449,
                        net_vol: U256::from(100000000000000000000u128),
                        capital: U256::from(900u16),
                        apy: Some(U256::from(34161553084816029075324244390830497u128)),
                        is_neg: true,
                    }),
                }
            );
        }
    }
}
