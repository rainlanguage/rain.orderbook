{
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "OrderNoHandleIO",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "OrderNoInputs",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "OrderNoOutputs",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "OrderNoSources",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "token",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "vaultId",
            "type": "uint256"
          }
        ],
        "name": "ZeroDepositAmount",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "token",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "vaultId",
            "type": "uint256"
          }
        ],
        "name": "ZeroWithdrawTargetAmount",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "contract IExpressionDeployerV2",
            "name": "expressionDeployer",
            "type": "address"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "handleIO",
                "type": "bool"
              },
              {
                "components": [
                  {
                    "internalType": "contract IInterpreterV1",
                    "name": "interpreter",
                    "type": "address"
                  },
                  {
                    "internalType": "contract IInterpreterStoreV1",
                    "name": "store",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "expression",
                    "type": "address"
                  }
                ],
                "internalType": "struct Evaluable",
                "name": "evaluable",
                "type": "tuple"
              },
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                  },
                  {
                    "internalType": "uint8",
                    "name": "decimals",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint256",
                    "name": "vaultId",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct IO[]",
                "name": "validInputs",
                "type": "tuple[]"
              },
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                  },
                  {
                    "internalType": "uint8",
                    "name": "decimals",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint256",
                    "name": "vaultId",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct IO[]",
                "name": "validOutputs",
                "type": "tuple[]"
              }
            ],
            "indexed": false,
            "internalType": "struct Order",
            "name": "order",
            "type": "tuple"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "orderHash",
            "type": "bytes32"
          }
        ],
        "name": "AddOrder",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "aliceOutput",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "bobOutput",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "aliceInput",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "bobInput",
                "type": "uint256"
              }
            ],
            "indexed": false,
            "internalType": "struct ClearStateChange",
            "name": "clearStateChange",
            "type": "tuple"
          }
        ],
        "name": "AfterClear",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "handleIO",
                "type": "bool"
              },
              {
                "components": [
                  {
                    "internalType": "contract IInterpreterV1",
                    "name": "interpreter",
                    "type": "address"
                  },
                  {
                    "internalType": "contract IInterpreterStoreV1",
                    "name": "store",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "expression",
                    "type": "address"
                  }
                ],
                "internalType": "struct Evaluable",
                "name": "evaluable",
                "type": "tuple"
              },
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                  },
                  {
                    "internalType": "uint8",
                    "name": "decimals",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint256",
                    "name": "vaultId",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct IO[]",
                "name": "validInputs",
                "type": "tuple[]"
              },
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                  },
                  {
                    "internalType": "uint8",
                    "name": "decimals",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint256",
                    "name": "vaultId",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct IO[]",
                "name": "validOutputs",
                "type": "tuple[]"
              }
            ],
            "indexed": false,
            "internalType": "struct Order",
            "name": "alice",
            "type": "tuple"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "handleIO",
                "type": "bool"
              },
              {
                "components": [
                  {
                    "internalType": "contract IInterpreterV1",
                    "name": "interpreter",
                    "type": "address"
                  },
                  {
                    "internalType": "contract IInterpreterStoreV1",
                    "name": "store",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "expression",
                    "type": "address"
                  }
                ],
                "internalType": "struct Evaluable",
                "name": "evaluable",
                "type": "tuple"
              },
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                  },
                  {
                    "internalType": "uint8",
                    "name": "decimals",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint256",
                    "name": "vaultId",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct IO[]",
                "name": "validInputs",
                "type": "tuple[]"
              },
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                  },
                  {
                    "internalType": "uint8",
                    "name": "decimals",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint256",
                    "name": "vaultId",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct IO[]",
                "name": "validOutputs",
                "type": "tuple[]"
              }
            ],
            "indexed": false,
            "internalType": "struct Order",
            "name": "bob",
            "type": "tuple"
          },
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "aliceInputIOIndex",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "aliceOutputIOIndex",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "bobInputIOIndex",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "bobOutputIOIndex",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "aliceBountyVaultId",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "bobBountyVaultId",
                "type": "uint256"
              }
            ],
            "indexed": false,
            "internalType": "struct ClearConfig",
            "name": "clearConfig",
            "type": "tuple"
          }
        ],
        "name": "Clear",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256[][]",
            "name": "context",
            "type": "uint256[][]"
          }
        ],
        "name": "Context",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "token",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "vaultId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "Deposit",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "orderHash",
            "type": "bytes32"
          }
        ],
        "name": "OrderExceedsMaxRatio",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "orderHash",
            "type": "bytes32"
          }
        ],
        "name": "OrderNotFound",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "orderHash",
            "type": "bytes32"
          }
        ],
        "name": "OrderZeroAmount",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "handleIO",
                "type": "bool"
              },
              {
                "components": [
                  {
                    "internalType": "contract IInterpreterV1",
                    "name": "interpreter",
                    "type": "address"
                  },
                  {
                    "internalType": "contract IInterpreterStoreV1",
                    "name": "store",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "expression",
                    "type": "address"
                  }
                ],
                "internalType": "struct Evaluable",
                "name": "evaluable",
                "type": "tuple"
              },
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                  },
                  {
                    "internalType": "uint8",
                    "name": "decimals",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint256",
                    "name": "vaultId",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct IO[]",
                "name": "validInputs",
                "type": "tuple[]"
              },
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                  },
                  {
                    "internalType": "uint8",
                    "name": "decimals",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint256",
                    "name": "vaultId",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct IO[]",
                "name": "validOutputs",
                "type": "tuple[]"
              }
            ],
            "indexed": false,
            "internalType": "struct Order",
            "name": "order",
            "type": "tuple"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "orderHash",
            "type": "bytes32"
          }
        ],
        "name": "RemoveOrder",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "components": [
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                  },
                  {
                    "internalType": "bool",
                    "name": "handleIO",
                    "type": "bool"
                  },
                  {
                    "components": [
                      {
                        "internalType": "contract IInterpreterV1",
                        "name": "interpreter",
                        "type": "address"
                      },
                      {
                        "internalType": "contract IInterpreterStoreV1",
                        "name": "store",
                        "type": "address"
                      },
                      {
                        "internalType": "address",
                        "name": "expression",
                        "type": "address"
                      }
                    ],
                    "internalType": "struct Evaluable",
                    "name": "evaluable",
                    "type": "tuple"
                  },
                  {
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint8",
                        "name": "decimals",
                        "type": "uint8"
                      },
                      {
                        "internalType": "uint256",
                        "name": "vaultId",
                        "type": "uint256"
                      }
                    ],
                    "internalType": "struct IO[]",
                    "name": "validInputs",
                    "type": "tuple[]"
                  },
                  {
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint8",
                        "name": "decimals",
                        "type": "uint8"
                      },
                      {
                        "internalType": "uint256",
                        "name": "vaultId",
                        "type": "uint256"
                      }
                    ],
                    "internalType": "struct IO[]",
                    "name": "validOutputs",
                    "type": "tuple[]"
                  }
                ],
                "internalType": "struct Order",
                "name": "order",
                "type": "tuple"
              },
              {
                "internalType": "uint256",
                "name": "inputIOIndex",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "outputIOIndex",
                "type": "uint256"
              },
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "signer",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256[]",
                    "name": "context",
                    "type": "uint256[]"
                  },
                  {
                    "internalType": "bytes",
                    "name": "signature",
                    "type": "bytes"
                  }
                ],
                "internalType": "struct SignedContextV1[]",
                "name": "signedContext",
                "type": "tuple[]"
              }
            ],
            "indexed": false,
            "internalType": "struct TakeOrderConfig",
            "name": "config",
            "type": "tuple"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "input",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "output",
            "type": "uint256"
          }
        ],
        "name": "TakeOrder",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "token",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "vaultId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "targetAmount",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "Withdraw",
        "type": "event"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                  },
                  {
                    "internalType": "uint8",
                    "name": "decimals",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint256",
                    "name": "vaultId",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct IO[]",
                "name": "validInputs",
                "type": "tuple[]"
              },
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                  },
                  {
                    "internalType": "uint8",
                    "name": "decimals",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint256",
                    "name": "vaultId",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct IO[]",
                "name": "validOutputs",
                "type": "tuple[]"
              },
              {
                "components": [
                  {
                    "internalType": "contract IExpressionDeployerV2",
                    "name": "deployer",
                    "type": "address"
                  },
                  {
                    "internalType": "bytes",
                    "name": "bytecode",
                    "type": "bytes"
                  },
                  {
                    "internalType": "uint256[]",
                    "name": "constants",
                    "type": "uint256[]"
                  }
                ],
                "internalType": "struct EvaluableConfigV2",
                "name": "evaluableConfig",
                "type": "tuple"
              },
              {
                "internalType": "bytes",
                "name": "meta",
                "type": "bytes"
              }
            ],
            "internalType": "struct OrderConfigV2",
            "name": "config",
            "type": "tuple"
          }
        ],
        "name": "addOrder",
        "outputs": [
          {
            "internalType": "bool",
            "name": "stateChanged",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "handleIO",
                "type": "bool"
              },
              {
                "components": [
                  {
                    "internalType": "contract IInterpreterV1",
                    "name": "interpreter",
                    "type": "address"
                  },
                  {
                    "internalType": "contract IInterpreterStoreV1",
                    "name": "store",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "expression",
                    "type": "address"
                  }
                ],
                "internalType": "struct Evaluable",
                "name": "evaluable",
                "type": "tuple"
              },
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                  },
                  {
                    "internalType": "uint8",
                    "name": "decimals",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint256",
                    "name": "vaultId",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct IO[]",
                "name": "validInputs",
                "type": "tuple[]"
              },
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                  },
                  {
                    "internalType": "uint8",
                    "name": "decimals",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint256",
                    "name": "vaultId",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct IO[]",
                "name": "validOutputs",
                "type": "tuple[]"
              }
            ],
            "internalType": "struct Order",
            "name": "alice",
            "type": "tuple"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "handleIO",
                "type": "bool"
              },
              {
                "components": [
                  {
                    "internalType": "contract IInterpreterV1",
                    "name": "interpreter",
                    "type": "address"
                  },
                  {
                    "internalType": "contract IInterpreterStoreV1",
                    "name": "store",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "expression",
                    "type": "address"
                  }
                ],
                "internalType": "struct Evaluable",
                "name": "evaluable",
                "type": "tuple"
              },
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                  },
                  {
                    "internalType": "uint8",
                    "name": "decimals",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint256",
                    "name": "vaultId",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct IO[]",
                "name": "validInputs",
                "type": "tuple[]"
              },
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                  },
                  {
                    "internalType": "uint8",
                    "name": "decimals",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint256",
                    "name": "vaultId",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct IO[]",
                "name": "validOutputs",
                "type": "tuple[]"
              }
            ],
            "internalType": "struct Order",
            "name": "bob",
            "type": "tuple"
          },
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "aliceInputIOIndex",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "aliceOutputIOIndex",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "bobInputIOIndex",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "bobOutputIOIndex",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "aliceBountyVaultId",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "bobBountyVaultId",
                "type": "uint256"
              }
            ],
            "internalType": "struct ClearConfig",
            "name": "clearConfig",
            "type": "tuple"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "signer",
                "type": "address"
              },
              {
                "internalType": "uint256[]",
                "name": "context",
                "type": "uint256[]"
              },
              {
                "internalType": "bytes",
                "name": "signature",
                "type": "bytes"
              }
            ],
            "internalType": "struct SignedContextV1[]",
            "name": "aliceSignedContext",
            "type": "tuple[]"
          },
          {
            "components": [
              {
                "internalType": "address",
                "name": "signer",
                "type": "address"
              },
              {
                "internalType": "uint256[]",
                "name": "context",
                "type": "uint256[]"
              },
              {
                "internalType": "bytes",
                "name": "signature",
                "type": "bytes"
              }
            ],
            "internalType": "struct SignedContextV1[]",
            "name": "bobSignedContext",
            "type": "tuple[]"
          }
        ],
        "name": "clear",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "token",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "vaultId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "deposit",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "token",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "flashFee",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract IERC3156FlashBorrower",
            "name": "receiver",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "token",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "flashLoan",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "token",
            "type": "address"
          }
        ],
        "name": "maxFlashLoan",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "orderHash",
            "type": "bytes32"
          }
        ],
        "name": "orderExists",
        "outputs": [
          {
            "internalType": "bool",
            "name": "exists",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "handleIO",
                "type": "bool"
              },
              {
                "components": [
                  {
                    "internalType": "contract IInterpreterV1",
                    "name": "interpreter",
                    "type": "address"
                  },
                  {
                    "internalType": "contract IInterpreterStoreV1",
                    "name": "store",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "expression",
                    "type": "address"
                  }
                ],
                "internalType": "struct Evaluable",
                "name": "evaluable",
                "type": "tuple"
              },
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                  },
                  {
                    "internalType": "uint8",
                    "name": "decimals",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint256",
                    "name": "vaultId",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct IO[]",
                "name": "validInputs",
                "type": "tuple[]"
              },
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                  },
                  {
                    "internalType": "uint8",
                    "name": "decimals",
                    "type": "uint8"
                  },
                  {
                    "internalType": "uint256",
                    "name": "vaultId",
                    "type": "uint256"
                  }
                ],
                "internalType": "struct IO[]",
                "name": "validOutputs",
                "type": "tuple[]"
              }
            ],
            "internalType": "struct Order",
            "name": "order",
            "type": "tuple"
          }
        ],
        "name": "removeOrder",
        "outputs": [
          {
            "internalType": "bool",
            "name": "stateChanged",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "output",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "input",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "minimumInput",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "maximumInput",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "maximumIORatio",
                "type": "uint256"
              },
              {
                "components": [
                  {
                    "components": [
                      {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                      },
                      {
                        "internalType": "bool",
                        "name": "handleIO",
                        "type": "bool"
                      },
                      {
                        "components": [
                          {
                            "internalType": "contract IInterpreterV1",
                            "name": "interpreter",
                            "type": "address"
                          },
                          {
                            "internalType": "contract IInterpreterStoreV1",
                            "name": "store",
                            "type": "address"
                          },
                          {
                            "internalType": "address",
                            "name": "expression",
                            "type": "address"
                          }
                        ],
                        "internalType": "struct Evaluable",
                        "name": "evaluable",
                        "type": "tuple"
                      },
                      {
                        "components": [
                          {
                            "internalType": "address",
                            "name": "token",
                            "type": "address"
                          },
                          {
                            "internalType": "uint8",
                            "name": "decimals",
                            "type": "uint8"
                          },
                          {
                            "internalType": "uint256",
                            "name": "vaultId",
                            "type": "uint256"
                          }
                        ],
                        "internalType": "struct IO[]",
                        "name": "validInputs",
                        "type": "tuple[]"
                      },
                      {
                        "components": [
                          {
                            "internalType": "address",
                            "name": "token",
                            "type": "address"
                          },
                          {
                            "internalType": "uint8",
                            "name": "decimals",
                            "type": "uint8"
                          },
                          {
                            "internalType": "uint256",
                            "name": "vaultId",
                            "type": "uint256"
                          }
                        ],
                        "internalType": "struct IO[]",
                        "name": "validOutputs",
                        "type": "tuple[]"
                      }
                    ],
                    "internalType": "struct Order",
                    "name": "order",
                    "type": "tuple"
                  },
                  {
                    "internalType": "uint256",
                    "name": "inputIOIndex",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "outputIOIndex",
                    "type": "uint256"
                  },
                  {
                    "components": [
                      {
                        "internalType": "address",
                        "name": "signer",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256[]",
                        "name": "context",
                        "type": "uint256[]"
                      },
                      {
                        "internalType": "bytes",
                        "name": "signature",
                        "type": "bytes"
                      }
                    ],
                    "internalType": "struct SignedContextV1[]",
                    "name": "signedContext",
                    "type": "tuple[]"
                  }
                ],
                "internalType": "struct TakeOrderConfig[]",
                "name": "orders",
                "type": "tuple[]"
              },
              {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
              }
            ],
            "internalType": "struct TakeOrdersConfigV2",
            "name": "config",
            "type": "tuple"
          }
        ],
        "name": "takeOrders",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "totalInput",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "totalOutput",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "token",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "vaultBalance",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "balance",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "token",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "vaultId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "targetAmount",
            "type": "uint256"
          }
        ],
        "name": "withdraw",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "bytecode": {
      "object": "0x",
      "sourceMap": "",
      "linkReferences": {}
    },
    "deployedBytecode": {
      "object": "0x",
      "sourceMap": "",
      "linkReferences": {}
    },
    "methodIdentifiers": {
      "addOrder(((address,uint8,uint256)[],(address,uint8,uint256)[],(address,bytes,uint256[]),bytes))": "847a1bc9",
      "clear((address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),(address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),(uint256,uint256,uint256,uint256,uint256,uint256),(address,uint256[],bytes)[],(address,uint256[],bytes)[])": "9e18968b",
      "deposit(address,uint256,uint256)": "0efe6a8b",
      "flashFee(address,uint256)": "d9d98ce4",
      "flashLoan(address,address,uint256,bytes)": "5cffe9de",
      "maxFlashLoan(address)": "613255ab",
      "orderExists(bytes32)": "2cb77e9f",
      "removeOrder((address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]))": "e23746a3",
      "takeOrders((address,address,uint256,uint256,uint256,((address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),uint256,uint256,(address,uint256[],bytes)[])[],bytes))": "a715c667",
      "vaultBalance(address,address,uint256)": "d97b2e48",
      "withdraw(address,uint256,uint256)": "b5c5f672"
    },
    "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OrderNoHandleIO\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OrderNoInputs\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OrderNoOutputs\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OrderNoSources\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"ZeroDepositAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"ZeroWithdrawTargetAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IExpressionDeployerV2\",\"name\":\"expressionDeployer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"handleIO\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"contract IInterpreterV1\",\"name\":\"interpreter\",\"type\":\"address\"},{\"internalType\":\"contract IInterpreterStoreV1\",\"name\":\"store\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expression\",\"type\":\"address\"}],\"internalType\":\"struct Evaluable\",\"name\":\"evaluable\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct IO[]\",\"name\":\"validInputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct IO[]\",\"name\":\"validOutputs\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"AddOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"aliceOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bobOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aliceInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bobInput\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ClearStateChange\",\"name\":\"clearStateChange\",\"type\":\"tuple\"}],\"name\":\"AfterClear\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"handleIO\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"contract IInterpreterV1\",\"name\":\"interpreter\",\"type\":\"address\"},{\"internalType\":\"contract IInterpreterStoreV1\",\"name\":\"store\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expression\",\"type\":\"address\"}],\"internalType\":\"struct Evaluable\",\"name\":\"evaluable\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct IO[]\",\"name\":\"validInputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct IO[]\",\"name\":\"validOutputs\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct Order\",\"name\":\"alice\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"handleIO\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"contract IInterpreterV1\",\"name\":\"interpreter\",\"type\":\"address\"},{\"internalType\":\"contract IInterpreterStoreV1\",\"name\":\"store\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expression\",\"type\":\"address\"}],\"internalType\":\"struct Evaluable\",\"name\":\"evaluable\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct IO[]\",\"name\":\"validInputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct IO[]\",\"name\":\"validOutputs\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct Order\",\"name\":\"bob\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"aliceInputIOIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aliceOutputIOIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bobInputIOIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bobOutputIOIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aliceBountyVaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bobBountyVaultId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ClearConfig\",\"name\":\"clearConfig\",\"type\":\"tuple\"}],\"name\":\"Clear\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[][]\",\"name\":\"context\",\"type\":\"uint256[][]\"}],\"name\":\"Context\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"OrderExceedsMaxRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"OrderNotFound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"OrderZeroAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"handleIO\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"contract IInterpreterV1\",\"name\":\"interpreter\",\"type\":\"address\"},{\"internalType\":\"contract IInterpreterStoreV1\",\"name\":\"store\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expression\",\"type\":\"address\"}],\"internalType\":\"struct Evaluable\",\"name\":\"evaluable\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct IO[]\",\"name\":\"validInputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct IO[]\",\"name\":\"validOutputs\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"RemoveOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"handleIO\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"contract IInterpreterV1\",\"name\":\"interpreter\",\"type\":\"address\"},{\"internalType\":\"contract IInterpreterStoreV1\",\"name\":\"store\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expression\",\"type\":\"address\"}],\"internalType\":\"struct Evaluable\",\"name\":\"evaluable\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct IO[]\",\"name\":\"validInputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct IO[]\",\"name\":\"validOutputs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"inputIOIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputIOIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"context\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedContextV1[]\",\"name\":\"signedContext\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct TakeOrderConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"name\":\"TakeOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct IO[]\",\"name\":\"validInputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct IO[]\",\"name\":\"validOutputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"contract IExpressionDeployerV2\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"constants\",\"type\":\"uint256[]\"}],\"internalType\":\"struct EvaluableConfigV2\",\"name\":\"evaluableConfig\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"meta\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderConfigV2\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"addOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"stateChanged\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"handleIO\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"contract IInterpreterV1\",\"name\":\"interpreter\",\"type\":\"address\"},{\"internalType\":\"contract IInterpreterStoreV1\",\"name\":\"store\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expression\",\"type\":\"address\"}],\"internalType\":\"struct Evaluable\",\"name\":\"evaluable\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct IO[]\",\"name\":\"validInputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct IO[]\",\"name\":\"validOutputs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Order\",\"name\":\"alice\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"handleIO\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"contract IInterpreterV1\",\"name\":\"interpreter\",\"type\":\"address\"},{\"internalType\":\"contract IInterpreterStoreV1\",\"name\":\"store\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expression\",\"type\":\"address\"}],\"internalType\":\"struct Evaluable\",\"name\":\"evaluable\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct IO[]\",\"name\":\"validInputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct IO[]\",\"name\":\"validOutputs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Order\",\"name\":\"bob\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"aliceInputIOIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aliceOutputIOIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bobInputIOIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bobOutputIOIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aliceBountyVaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bobBountyVaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct ClearConfig\",\"name\":\"clearConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"context\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedContextV1[]\",\"name\":\"aliceSignedContext\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"context\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedContextV1[]\",\"name\":\"bobSignedContext\",\"type\":\"tuple[]\"}],\"name\":\"clear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC3156FlashBorrower\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"orderExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"handleIO\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"contract IInterpreterV1\",\"name\":\"interpreter\",\"type\":\"address\"},{\"internalType\":\"contract IInterpreterStoreV1\",\"name\":\"store\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expression\",\"type\":\"address\"}],\"internalType\":\"struct Evaluable\",\"name\":\"evaluable\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct IO[]\",\"name\":\"validInputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct IO[]\",\"name\":\"validOutputs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"removeOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"stateChanged\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"output\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumIORatio\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"handleIO\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"contract IInterpreterV1\",\"name\":\"interpreter\",\"type\":\"address\"},{\"internalType\":\"contract IInterpreterStoreV1\",\"name\":\"store\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expression\",\"type\":\"address\"}],\"internalType\":\"struct Evaluable\",\"name\":\"evaluable\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct IO[]\",\"name\":\"validInputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct IO[]\",\"name\":\"validOutputs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"inputIOIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputIOIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"context\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedContextV1[]\",\"name\":\"signedContext\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TakeOrderConfig[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct TakeOrdersConfigV2\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"takeOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"vaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OrderNoHandleIO(address)\":[{\"params\":{\"sender\":\"`msg.sender` adding the order.\"}}],\"OrderNoInputs(address)\":[{\"params\":{\"sender\":\"`msg.sender` adding the order.\"}}],\"OrderNoOutputs(address)\":[{\"params\":{\"sender\":\"`msg.sender` adding the order.\"}}],\"OrderNoSources(address)\":[{\"params\":{\"sender\":\"`msg.sender` adding the order.\"}}],\"ZeroDepositAmount(address,address,uint256)\":[{\"params\":{\"sender\":\"`msg.sender` depositing tokens.\",\"token\":\"The token being deposited.\",\"vaultId\":\"The vault ID the tokens are being deposited under.\"}}],\"ZeroWithdrawTargetAmount(address,address,uint256)\":[{\"params\":{\"sender\":\"`msg.sender` withdrawing tokens.\",\"token\":\"The token being withdrawn.\",\"vaultId\":\"The vault ID the tokens are being withdrawn from.\"}}]},\"events\":{\"AddOrder(address,address,(address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),bytes32)\":{\"params\":{\"expressionDeployer\":\"The expression deployer that ran the integrity check for this order. This is NOT included in the `Order` itself but is important for offchain processes to ignore untrusted deployers before interacting with them.\",\"order\":\"The newly added order. MUST be handed back as-is when clearing orders and contains derived information in addition to the order config that was provided by the order owner.\",\"orderHash\":\"The hash of the order as it is recorded onchain. Only the hash is stored in Orderbook storage to avoid paying gas to store the entire order.\",\"sender\":\"`msg.sender` adding the order and is owner of the order.\"}},\"AfterClear(address,(uint256,uint256,uint256,uint256))\":{\"params\":{\"clearStateChange\":\"The final vault state changes from the clearance.\",\"sender\":\"`msg.sender` clearing the order.\"}},\"Clear(address,(address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),(address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),(uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"alice\":\"One of the orders.\",\"bob\":\"The other order.\",\"clearConfig\":\"Additional config required to process the clearance.\",\"sender\":\"`msg.sender` clearing both orders.\"}},\"Context(address,uint256[][])\":{\"params\":{\"context\":\"The context that was built.\",\"sender\":\"`msg.sender` building the context.\"}},\"Deposit(address,address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of tokens deposited.\",\"sender\":\"`msg.sender` depositing tokens. Delegated deposits are NOT supported.\",\"token\":\"The token being deposited.\",\"vaultId\":\"The vault ID the tokens are being deposited under.\"}},\"OrderExceedsMaxRatio(address,address,bytes32)\":{\"params\":{\"orderHash\":\"Hash of the order that had an excess ratio.\",\"owner\":\"Owner of the order that had an excess ratio.\",\"sender\":\"`msg.sender` clearing the order that had an excess ratio.\"}},\"OrderNotFound(address,address,bytes32)\":{\"params\":{\"orderHash\":\"Hash of the order that was not found.\",\"owner\":\"Owner of the order that was not found.\",\"sender\":\"`msg.sender` clearing the order that wasn't found.\"}},\"OrderZeroAmount(address,address,bytes32)\":{\"params\":{\"orderHash\":\"Hash of the order that evaluated to a 0 amount.\",\"owner\":\"Owner of the order that evaluated to a 0 amount.\",\"sender\":\"`msg.sender` clearing the order that had a 0 amount.\"}},\"RemoveOrder(address,(address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),bytes32)\":{\"params\":{\"order\":\"The removed order.\",\"orderHash\":\"The hash of the removed order.\",\"sender\":\"`msg.sender` removing the order and is owner of the order.\"}},\"TakeOrder(address,((address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),uint256,uint256,(address,uint256[],bytes)[]),uint256,uint256)\":{\"params\":{\"config\":\"All config defining the orders to attempt to take.\",\"input\":\"The input amount from the perspective of sender.\",\"output\":\"The output amount from the perspective of sender.\",\"sender\":\"`msg.sender` taking the orders.\"}},\"Withdraw(address,address,uint256,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of tokens withdrawn, can be less than the target amount if the vault does not have the funds available to cover the target amount. For example an active order might move tokens before the withdraw completes.\",\"sender\":\"`msg.sender` withdrawing tokens. Delegated withdrawals are NOT supported.\",\"targetAmount\":\"The amount of tokens requested to withdraw.\",\"token\":\"The token being withdrawn.\",\"vaultId\":\"The vault ID the tokens are being withdrawn from.\"}}},\"kind\":\"dev\",\"methods\":{\"addOrder(((address,uint8,uint256)[],(address,uint8,uint256)[],(address,bytes,uint256[]),bytes))\":{\"params\":{\"config\":\"All config required to build an `Order`.\"},\"returns\":{\"stateChanged\":\"True if the order was added, false if it already existed.\"}},\"clear((address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),(address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),(uint256,uint256,uint256,uint256,uint256,uint256),(address,uint256[],bytes)[],(address,uint256[],bytes)[])\":{\"params\":{\"alice\":\"Some order to clear.\",\"aliceSignedContext\":\"Optional signed context that is relevant to A.\",\"bob\":\"Another order to clear.\",\"bobSignedContext\":\"Optional signed context that is relevant to B.\",\"clearConfig\":\"Additional configuration for the clearance such as how to handle the bounty payment for the `msg.sender`.\"}},\"deposit(address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to deposit.\",\"token\":\"The token to deposit.\",\"vaultId\":\"The vault ID to deposit under.\"}},\"flashFee(address,uint256)\":{\"details\":\"The fee to be charged for a given loan.\",\"params\":{\"amount\":\"The amount of tokens lent.\",\"token\":\"The loan currency.\"},\"returns\":{\"_0\":\"The amount of `token` to be charged for the loan, on top of the returned principal.\"}},\"flashLoan(address,address,uint256,bytes)\":{\"details\":\"Initiate a flash loan.\",\"params\":{\"amount\":\"The amount of tokens lent.\",\"data\":\"Arbitrary data structure, intended to contain user-defined parameters.\",\"receiver\":\"The receiver of the tokens in the loan, and the receiver of the callback.\",\"token\":\"The loan currency.\"}},\"maxFlashLoan(address)\":{\"details\":\"The amount of currency available to be lent.\",\"params\":{\"token\":\"The loan currency.\"},\"returns\":{\"_0\":\"The amount of `token` that can be borrowed.\"}},\"orderExists(bytes32)\":{\"params\":{\"orderHash\":\"The hash of the order to check.\"},\"returns\":{\"exists\":\"True if the order exists, false otherwise.\"}},\"removeOrder((address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]))\":{\"params\":{\"order\":\"The `Order` data exactly as it was added.\"},\"returns\":{\"stateChanged\":\"True if the order was removed, false if it did not exist.\"}},\"takeOrders((address,address,uint256,uint256,uint256,((address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),uint256,uint256,(address,uint256[],bytes)[])[],bytes))\":{\"params\":{\"config\":\"The constraints and list of orders to take, orders are processed sequentially in order as provided, there is NO ATTEMPT onchain to predict/filter/sort these orders other than evaluating them as provided. Inputs and outputs are from the perspective of `msg.sender` except for values specified by the orders themselves which are the from the perspective of that order.\"},\"returns\":{\"totalInput\":\"Total tokens sent to `msg.sender`, taken from order vaults processed.\",\"totalOutput\":\"Total tokens taken from `msg.sender` and distributed between vaults.\"}},\"vaultBalance(address,address,uint256)\":{\"params\":{\"id\":\"The vault ID to read.\",\"owner\":\"The owner of the vault.\",\"token\":\"The token the vault is for.\"},\"returns\":{\"balance\":\"The current balance of the vault.\"}},\"withdraw(address,uint256,uint256)\":{\"params\":{\"targetAmount\":\"The amount of tokens to attempt to withdraw. MAY result in fewer tokens withdrawn if the vault balance is lower than the target amount. MAY NOT be zero, the order book MUST revert with `ZeroWithdrawTargetAmount` if the amount is zero.\",\"token\":\"The token to withdraw.\",\"vaultId\":\"The vault ID to withdraw from.\"}}},\"title\":\"IOrderBookV3\",\"version\":1},\"userdoc\":{\"errors\":{\"OrderNoHandleIO(address)\":[{\"notice\":\"MUST be thrown by `addOrder` if the order has no associated handle IO.\"}],\"OrderNoInputs(address)\":[{\"notice\":\"MUST be thrown by `addOrder` if the order has no inputs.\"}],\"OrderNoOutputs(address)\":[{\"notice\":\"MUST be thrown by `addOrder` if the order has no outputs.\"}],\"OrderNoSources(address)\":[{\"notice\":\"MUST be thrown by `addOrder` if the order has no associated calculation.\"}],\"ZeroDepositAmount(address,address,uint256)\":[{\"notice\":\"MUST be thrown by `deposit` if the amount is zero.\"}],\"ZeroWithdrawTargetAmount(address,address,uint256)\":[{\"notice\":\"MUST be thrown by `withdraw` if the amount _requested_ to withdraw is zero. The withdrawal MAY still not move any tokens if the vault balance is zero, or the withdrawal is used to repay a flash loan.\"}]},\"events\":{\"AddOrder(address,address,(address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),bytes32)\":{\"notice\":\"An order has been added to the orderbook. The order is permanently and always active according to its expression until/unless it is removed.\"},\"AfterClear(address,(uint256,uint256,uint256,uint256))\":{\"notice\":\"Emitted after two orders clear. Includes all final state changes in the vault balances, including the clearer's vaults.\"},\"Clear(address,(address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),(address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),(uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Emitted before two orders clear. Covers both orders and includes all the state before anything is calculated.\"},\"Context(address,uint256[][])\":{\"notice\":\"Calling contracts SHOULD emit `Context` before calling `eval` if they are able. Notably `eval` MAY be called within a static call which means that events cannot be emitted, in which case this does not apply. It MAY NOT be useful to emit this multiple times for several eval calls if they all share a common context, in which case a single emit is sufficient.\"},\"Deposit(address,address,uint256,uint256)\":{\"notice\":\"Some tokens have been deposited to a vault.\"},\"OrderExceedsMaxRatio(address,address,bytes32)\":{\"notice\":\"Emitted when an order evaluates to a ratio exceeding the counterparty's maximum limit. An error rather than an error so that we allow attempting many orders in a loop and NOT rollback on a \\\"best effort\\\" basis to clear.\"},\"OrderNotFound(address,address,bytes32)\":{\"notice\":\"Emitted when attempting to match an order that either never existed or was removed. An event rather than an error so that we allow attempting many orders in a loop and NOT rollback on \\\"best effort\\\" basis to clear.\"},\"OrderZeroAmount(address,address,bytes32)\":{\"notice\":\"Emitted when an order evaluates to a zero amount. An event rather than an error so that we allow attempting many orders in a loop and NOT rollback on a \\\"best effort\\\" basis to clear.\"},\"RemoveOrder(address,(address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),bytes32)\":{\"notice\":\"An order has been removed from the orderbook. This effectively deactivates it. Orders can be added again after removal.\"},\"TakeOrder(address,((address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),uint256,uint256,(address,uint256[],bytes)[]),uint256,uint256)\":{\"notice\":\"Some order has been taken by `msg.sender`. This is the same as them placing inverse orders then immediately clearing them all, but costs less gas and is more convenient and reliable. Analogous to a market buy against the specified orders. Each order that is matched within a the `takeOrders` loop emits its own individual event.\"},\"Withdraw(address,address,uint256,uint256,uint256)\":{\"notice\":\"Some tokens have been withdrawn from a vault.\"}},\"kind\":\"user\",\"methods\":{\"addOrder(((address,uint8,uint256)[],(address,uint8,uint256)[],(address,bytes,uint256[]),bytes))\":{\"notice\":\"Given an order config, deploys the expression and builds the full `Order` for the config, then records it as an active order. Delegated adding an order is NOT supported. The `msg.sender` that adds an order is ALWAYS the owner and all resulting vault movements are their own. MUST revert with `OrderNoSources` if the order has no associated calculation and `OrderNoHandleIO` if the order has no handle IO entrypoint. The calculation MUST return at least two values from evaluation, the maximum amount and the IO ratio. The handle IO entrypoint SHOULD return zero values from evaluation. Either MAY revert during evaluation on the interpreter, which MUST prevent the order from clearing. MUST revert with `OrderNoInputs` if the order has no inputs. MUST revert with `OrderNoOutputs` if the order has no outputs. If the order already exists, the order book MUST NOT change state, which includes not emitting an event. Instead it MUST return false. If the order book modifies state it MUST emit an `AddOrder` event and return true.\"},\"clear((address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),(address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),(uint256,uint256,uint256,uint256,uint256,uint256),(address,uint256[],bytes)[],(address,uint256[],bytes)[])\":{\"notice\":\"Allows `msg.sender` to match two live orders placed earlier by non-interactive parties and claim a bounty in the process. The clearer is free to select any two live orders on the order book for matching and as long as they have compatible tokens, ratios and amounts, the orders will clear. Clearing the orders DOES NOT remove them from the orderbook, they remain live until explicitly removed by their owner. Even if the input vault balances are completely emptied, the orders remain live until removed. This allows order owners to deploy a strategy over a long period of time and periodically top up the input vaults. Clearing two orders from the same owner is disallowed. Any mismatch in the ratios between the two orders will cause either more inputs than there are available outputs (transaction will revert) or less inputs than there are available outputs. In the latter case the excess outputs are given to the `msg.sender` of clear, to the vaults they specify in the clear config. This not only incentivises \\\"automatic\\\" clear calls for both alice and bob, but incentivises _prioritising greater ratio differences_ with a larger bounty. The second point is important because it implicitly prioritises orders that are further from the current market price, thus putting constant increasing pressure on the entire system the further it drifts from the norm, no matter how esoteric the individual order expressions and sizings might be. All else equal there are several factors that would impact how reliably some order clears relative to the wider market, such as: - Bounties are effectively percentages of cleared amounts so larger   orders have larger bounties and cover gas costs more easily - High gas on the network means that orders are harder to clear   profitably so the negative spread of the ratios will need to be larger - Complex and stateful expressions cost more gas to evalulate so the   negative spread will need to be larger - Erratic behavior of the order owner could reduce the willingness of   third parties to interact if it could result in wasted gas due to   orders suddently being removed before clearance etc. - Dynamic and highly volatile words used in the expression could be   ignored or low priority by clearers who want to be sure that they can   accurately predict the ratios that they include in their clearance - Geopolitical issues such as sanctions and regulatory restrictions could   cause issues for certain owners and clearers\"},\"deposit(address,uint256,uint256)\":{\"notice\":\"Vault IDs are namespaced by the token address so there is no risk of collision between tokens. For example, vault ID 0 for token A is completely different to vault ID 0 for token B. `0` amount deposits are unsupported as underlying token contracts handle `0` value transfers differently and this would be a source of confusion. The order book MUST revert with `ZeroDepositAmount` if the amount is zero.\"},\"orderExists(bytes32)\":{\"notice\":\"Returns true if the order exists, false otherwise.\"},\"removeOrder((address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]))\":{\"notice\":\"Order owner can remove their own orders. Delegated order removal is NOT supported and will revert. Removing an order multiple times or removing an order that never existed are valid, the event will be emitted and the transaction will complete with that order hash definitely, redundantly not live.\"},\"takeOrders((address,address,uint256,uint256,uint256,((address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),uint256,uint256,(address,uint256[],bytes)[])[],bytes))\":{\"notice\":\"Allows `msg.sender` to attempt to fill a list of orders in sequence without needing to place their own order and clear them. This works like a market buy but against a specific set of orders. Every order will looped over and calculated individually then filled maximally until the request input is reached for the `msg.sender`. The `msg.sender` is responsible for selecting the best orders at the time according to their criteria and MAY specify a maximum IO ratio to guard against an order spiking the ratio beyond what the `msg.sender` expected and is comfortable with. As orders may be removed and calculate their ratios dynamically, all issues fulfilling an order other than misconfiguration by the `msg.sender` are no-ops and DO NOT revert the transaction. This allows the `msg.sender` to optimistically provide a list of orders that they aren't sure will completely fill at a good price, and fallback to more reliable orders further down their list. Misconfiguration such as token mismatches are errors that revert as this is known and static at all times to the `msg.sender` so MUST be provided correctly. `msg.sender` MAY specify a minimum input that MUST be reached across all orders in the list, otherwise the transaction will revert, this MAY be set to zero. Exactly like withdraw, if there is an active flash loan for `msg.sender` they will have their outstanding loan reduced by the final input amount preferentially before sending any tokens. Notably this allows arb bots implemented as flash loan borrowers to connect orders against external liquidity directly by paying back the loan with a `takeOrders` call and outputting the result of the external trade. Rounding errors always favour the order never the `msg.sender`.\"},\"vaultBalance(address,address,uint256)\":{\"notice\":\"Get the current balance of a vault for a given owner, token and vault ID.\"},\"withdraw(address,uint256,uint256)\":{\"notice\":\"Allows the sender to withdraw any tokens from their own vaults. If the withrawer has an active flash loan debt denominated in the same token being withdrawn then Orderbook will merely reduce the debt and NOT send the amount of tokens repaid to the flashloan debt. MUST revert if the amount _requested_ to withdraw is zero. The withdrawal MAY still not move any tokens (without revert) if the vault balance is zero, or the withdrawal is used to repay a flash loan, or due to any other internal accounting.\"}},\"notice\":\"An orderbook that deploys _strategies_ represented as interpreter expressions rather than individual orders. The order book contract itself behaves similarly to an `ERC4626` vault but with much more fine grained control over how tokens are allocated and moved internally by their owners, and without any concept of \\\"shares\\\". Token owners MAY deposit and withdraw their tokens under arbitrary vault IDs on a per-token basis, then define orders that specify how tokens move between vaults according to an expression. The expression returns a maximum amount and a token input/output ratio from the perpective of the order. When two expressions intersect, as in their ratios are the inverse of each other, then tokens can move between vaults. For example, consider order A with input TKNA and output TKNB with a constant ratio of 100:1. This order in isolation has no ability to move tokens. If an order B appears with input TKNB and output TKNA and a ratio of 1:100 then this is a perfect match with order A. In this case 100 TKNA will move from order B to order A and 1 TKNB will move from order A to order B. IO ratios are always specified as input:output and are 18 decimal fixed point values. The maximum amount that can be moved in the current clearance is also set by the order expression as an 18 decimal fixed point value. Typically orders will not clear when their match is exactly 1:1 as the clearer needs to pay gas to process the match. Each order will get exactly the ratio it calculates when it does clear so if there is _overlap_ in the ratios then the clearer keeps the difference. In our above example, consider order B asking a ratio of 1:110 instead of 1:100. In this case 100 TKNA will move from order B to order A and 10 TKNA will move to the clearer's vault and 1 TKNB will move from order A to order B. In the case of fixed prices this is not very interesting as order B could more simply take order A directly for cheaper rather than involving a third party. Indeed, Orderbook supports a direct \\\"take orders\\\" method that works similar to a \\\"market buy\\\". In the case of dynamic expression based ratios, it allows both order A and order B to clear non-interactively according to their strategy, trading off active management, dealing with front-running, MEV, etc. for zero-gas and exact-ratio clearance. The general invariant for clearing and take orders is: ``` ratioA = InputA / OutputA ratioB = InputB / OutputB ratioA * ratioB = ( InputA * InputB ) / ( OutputA * OutputB ) OutputA >= InputB OutputB >= InputA \\u2234 ratioA * ratioB <= 1 ``` Orderbook is `IERC3156FlashLender` compliant with a 0 fee flash loan implementation to allow external liquidity from other onchain DEXes to match against orderbook expressions. All deposited tokens across all vaults are available for flashloan, the flashloan MAY BE REPAID BY CALLING TAKE ORDER such that Orderbook's liability to its vaults is decreased by an incoming trade from the flashloan borrower. See `ZeroExOrderBookFlashBorrower` for an example of how this works in practise. Orderbook supports many to many input/output token relationship, for example some order can specify an array of stables it would be willing to accept in return for some ETH. This removes the need for a combinatorial explosion of order strategies between like assets but introduces the issue of token decimal handling. End users understand that \\\"one\\\" USDT is roughly equal to \\\"one\\\" DAI, but onchain this is incorrect by _12 orders of magnitude_. This is because \\\"one\\\" DAI is `1e18` tokens and \\\"one\\\" USDT is `1e6` tokens. The orderbook is allowing orders to deploy expressions that define _economic equivalence_ but this doesn't map 1:1 with numeric equivalence in a many to many setup behind token decimal convensions. The solution is to require that end users who place orders provide the decimals of each token they include in their valid IO lists, and to calculate all amounts and ratios in their expressions _as though they were 18 decimal fixed point values_. Orderbook will then automatically rescale the expression values before applying the final vault movements. If an order provides the \\\"wrong\\\" decimal values for some token then it will simply calculate its own ratios and amounts incorrectly which will either lead to no matching orders or a very bad trade for the order owner. There is no way that misrepresenting decimals can attack some other order by a counterparty. Orderbook DOES NOT read decimals from tokens onchain because A. this would be gas for an external call to a cold token contract and B. the ERC20 standard specifically states NOT to read decimals from the interface onchain. Token amounts and ratios returned by calculate order MUST be 18 decimal fixed point values. Token amounts input to handle IO MUST be the exact absolute values that move between the vaults, i.e. NOT rescaled to 18 decimals. The author of the handle IO expression MUST use the token decimals and amounts to rescale themselves if they want that logic, notably the expression author will need to specify the desired rounding behaviour in the rescaling process. When two orders clear there are NO TOKEN MOVEMENTS, only internal vault balances are updated from the input and output vaults. Typically this results in less gas per clear than calling external token transfers and also avoids issues with reentrancy, allowances, external balances etc. This also means that REBASING TOKENS AND TOKENS WITH DYNAMIC BALANCE ARE NOT SUPPORTED. Orderbook ONLY WORKS IF TOKEN BALANCES ARE 1:1 WITH ADDITION/SUBTRACTION PER VAULT MOVEMENT. Dust due to rounding errors always favours the order. Output max is rounded down and IO ratios are rounded up. Input and output amounts are always converted to absolute values before applying to vault balances such that orderbook always retains fully collateralised inventory of underlying token balances to support withdrawals, with the caveat that dynamic token balanes are not supported. When an order clears it is NOT removed. Orders remain active until the owner deactivates them. This is gas efficient as order owners MAY deposit more tokens in a vault with an order against it many times and the order strategy will continue to be clearable according to its expression. As vault IDs are `uint256` values there are effectively infinite possible vaults for any token so there is no limit to how many active orders any address can have at one time. This also allows orders to be daisy chained arbitrarily where output vaults for some order are the input vaults for some other order. Expression storage is namespaced by order owner, so gets and sets are unique to each onchain address. Order owners MUST TAKE CARE not to override their storage sets globally across all their orders, which they can do most simply by hashing the order hash into their get/set keys inside the expression. This gives maximum flexibility for shared state across orders without allowing order owners to attack and overwrite values stored by orders placed by their counterparty. Note that each order specifies its own interpreter and deployer so the owner is responsible for not corrupting their own calculations with bad interpreters. This also means the Orderbook MUST assume the interpreter, and notably the interpreter's store, is malicious and guard against reentrancy etc. As Orderbook supports any expression that can run on any `IInterpreterV1` and counterparties are available to the order, order strategies are free to implement KYC/membership, tracking, distributions, stock, buybacks, etc. etc. Main differences between `IOrderBookV2` and `IOderBookV3`: - Most structs are now primitives to save gas. - Order hash is `bytes32`. - `deposit` and `withdraw` MUST revert if the amount is zero. - adding an order MUST revert if there is no calculation entrypoint. - adding an order MUST revert if there is no handle IO entrypoint. - adding an order MUST revert if there are no inputs. - adding an order MUST revert if there are no outputs. - adding and removing orders MUST return a boolean indicating if the state changed. - new `orderExists` method.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interface/unstable/IOrderBookV3.sol\":\"IOrderBookV3\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@prb/test/=lib/rain.interpreter/lib/prb-math/lib/prb-test/src/\",\":bytecode/=lib/rain.interpreter/src/lib/bytecode/\",\":caller/=lib/rain.interpreter/src/lib/caller/\",\":compile/=lib/rain.interpreter/src/lib/compile/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":eval/=lib/rain.interpreter/src/lib/eval/\",\":extern/=lib/rain.interpreter/src/lib/extern/\",\":forge-std/=lib/forge-std/src/\",\":integrity/=lib/rain.interpreter/src/lib/integrity/\",\":ns/=lib/rain.interpreter/src/lib/ns/\",\":op/=lib/rain.interpreter/src/lib/op/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":parse/=lib/rain.interpreter/src/lib/parse/\",\":prb-math/=lib/rain.interpreter/lib/prb-math/src/\",\":prb-test/=lib/rain.interpreter/lib/prb-math/lib/prb-test/src/\",\":rain.chainlink/=lib/rain.interpreter/lib/rain.chainlink/src/\",\":rain.datacontract/=lib/rain.datacontract/src/\",\":rain.erc1820/=lib/rain.erc1820/src/\",\":rain.extrospection/=lib/rain.factory/lib/rain.extrospection/\",\":rain.factory/=lib/rain.factory/\",\":rain.interpreter/=lib/rain.interpreter/\",\":rain.lib.hash/=lib/rain.lib.memkv/lib/rain.lib.hash/src/\",\":rain.lib.memkv/=lib/rain.lib.memkv/src/\",\":rain.lib.typecast/=lib/rain.interpreter/lib/rain.lib.typecast/src/\",\":rain.math.fixedpoint/=lib/rain.math.fixedpoint/src/\",\":rain.math.saturating/=lib/rain.math.fixedpoint/lib/rain.math.saturating/src/\",\":rain.metadata/=lib/rain.metadata/src/\",\":rain.solmem/=lib/rain.datacontract/lib/rain.solmem/src/\",\":sol.lib.binmaskflag/=lib/rain.interpreter/lib/sol.lib.binmaskflag/src/\",\":state/=lib/rain.interpreter/src/lib/state/\",\":uniswap/=lib/rain.interpreter/src/lib/uniswap/\",\":v2-core/=lib/rain.interpreter/lib/v2-core/contracts/\",\":v2-periphery/=lib/rain.interpreter/lib/v2-periphery/contracts/\"]},\"sources\":{\"lib/rain.interpreter/src/interface/IExpressionDeployerV1.sol\":{\"keccak256\":\"0x42d4d91cc62778967ca5f1bb2e7b2c97ca2de2c49518bc8a08a0b50275074ab6\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://6f461a0c0f65a514799200a64bc0e9d926abe4e0bba0c4e2ca0e3d6a04677768\",\"dweb:/ipfs/QmeUggk58ypM3721672wdupquFM8W9VnY3qpn8swKoeLhA\"]},\"lib/rain.interpreter/src/interface/IInterpreterCallerV2.sol\":{\"keccak256\":\"0xdbcd86209f48d96355da6e3f1c7f09530667f62544aa43b7058fe99063a20b6e\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://b3803c98391a7db85b12c2ad9858abcda0022d0c004aabdad5ea736959a8ac0f\",\"dweb:/ipfs/QmbL5b4Rz1H4ZPVQzLET8UrQqXiUBnbwCkdUE6jHqPcapN\"]},\"lib/rain.interpreter/src/interface/IInterpreterStoreV1.sol\":{\"keccak256\":\"0xbd9baa8cd30406576f876a76f1c08396561ba93131741af338f63e2414e20619\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://30bb6f09d8b8f27f77e6c44591c4f2070286a91dad202043cf2351ae802e3df5\",\"dweb:/ipfs/QmRz5pfzf5w84iNmKaYYbqP8oQywzc5xbd3xzKmxgFyf9y\"]},\"lib/rain.interpreter/src/interface/IInterpreterV1.sol\":{\"keccak256\":\"0xebde08ca2e1c25fc733e0bb8867598715f8ba79772f86db1c8960ad7d68a5293\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://b93fb28a09aeea4afe7f0d4afc67354c0fa538e5a9b274b0c5f10ed1dd6b6b00\",\"dweb:/ipfs/QmatNhoHRSJ1ZvoCNo61YMt9jb1vvEkWy3mkcoPkB4FFA9\"]},\"lib/rain.interpreter/src/interface/unstable/IExpressionDeployerV2.sol\":{\"keccak256\":\"0x7bbcf9d3689bdecdc58537e5185f0b88e8d4e91a295f5124f19779609f19f219\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://ccdcba71f76f2a730685f956f1854355751a3c9b4caef9569e2a6d8acc8747a5\",\"dweb:/ipfs/QmQrWgCnxd9aGEHhmFTPkA8E3GVsKuwDhe2UQ5WyfA5LSA\"]},\"lib/rain.interpreter/src/lib/caller/LibEvaluable.sol\":{\"keccak256\":\"0x9bd77a3efb7e0762ca214efe30c3c49c3f3efae3b6c759db2c7a0aa52ff3d364\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://6125b3bd94d9966557c068dda143c930d37662da06cd84a4369a673f4ce8b07c\",\"dweb:/ipfs/QmepFEJseAU31gPAa7Hq2H3ZDfRJ3DnK94CBpe73H3v7yP\"]},\"src/interface/ierc3156/IERC3156FlashBorrower.sol\":{\"keccak256\":\"0x493227b1bc21c04ba2506d8d63f8fab8eb828683cf41336db1076edee2e010a7\",\"license\":\"CC0\",\"urls\":[\"bzz-raw://99b27f1f11576c22462c93ab613835522dfc89a7e28e584df034b339187bc15c\",\"dweb:/ipfs/QmQZ1H8PotScE5rSbruZn97MC6pgDNTuCQcjtg8ZWU4SPB\"]},\"src/interface/ierc3156/IERC3156FlashLender.sol\":{\"keccak256\":\"0x191637dc4503bf6cc0c6c0539bf83a758b124e37abc5da05ae4d446133cf36b5\",\"license\":\"CC0\",\"urls\":[\"bzz-raw://de7dea1fd8bd0dcdae7bdb400d4ccc9e01ecb73e23ef2b2f77704a9741669273\",\"dweb:/ipfs/QmT8BAK76nEJ5kTKkDxDovD4xuAXPACAyxshUA4RX3WLe3\"]},\"src/interface/unstable/IOrderBookV3.sol\":{\"keccak256\":\"0x903dd3592407606a21384487d60f6d262848358c904b4de0756731c9cba777ae\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://98a2c9621a42ad45172c6045322f928a86481954107bde73fded74c3368764e6\",\"dweb:/ipfs/QmeMwBRZz9qE3RV7drutNSAjCQVRmt9FZbKsZC2jcPixcg\"]}},\"version\":1}",
    "metadata": {
      "compiler": {
        "version": "0.8.19+commit.7dd6d404"
      },
      "language": "Solidity",
      "output": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              }
            ],
            "type": "error",
            "name": "OrderNoHandleIO"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              }
            ],
            "type": "error",
            "name": "OrderNoInputs"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              }
            ],
            "type": "error",
            "name": "OrderNoOutputs"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              }
            ],
            "type": "error",
            "name": "OrderNoSources"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "token",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "vaultId",
                "type": "uint256"
              }
            ],
            "type": "error",
            "name": "ZeroDepositAmount"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "token",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "vaultId",
                "type": "uint256"
              }
            ],
            "type": "error",
            "name": "ZeroWithdrawTargetAmount"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address",
                "indexed": false
              },
              {
                "internalType": "contract IExpressionDeployerV2",
                "name": "expressionDeployer",
                "type": "address",
                "indexed": false
              },
              {
                "internalType": "struct Order",
                "name": "order",
                "type": "tuple",
                "components": [
                  {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                  },
                  {
                    "internalType": "bool",
                    "name": "handleIO",
                    "type": "bool"
                  },
                  {
                    "internalType": "struct Evaluable",
                    "name": "evaluable",
                    "type": "tuple",
                    "components": [
                      {
                        "internalType": "contract IInterpreterV1",
                        "name": "interpreter",
                        "type": "address"
                      },
                      {
                        "internalType": "contract IInterpreterStoreV1",
                        "name": "store",
                        "type": "address"
                      },
                      {
                        "internalType": "address",
                        "name": "expression",
                        "type": "address"
                      }
                    ]
                  },
                  {
                    "internalType": "struct IO[]",
                    "name": "validInputs",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint8",
                        "name": "decimals",
                        "type": "uint8"
                      },
                      {
                        "internalType": "uint256",
                        "name": "vaultId",
                        "type": "uint256"
                      }
                    ]
                  },
                  {
                    "internalType": "struct IO[]",
                    "name": "validOutputs",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint8",
                        "name": "decimals",
                        "type": "uint8"
                      },
                      {
                        "internalType": "uint256",
                        "name": "vaultId",
                        "type": "uint256"
                      }
                    ]
                  }
                ],
                "indexed": false
              },
              {
                "internalType": "bytes32",
                "name": "orderHash",
                "type": "bytes32",
                "indexed": false
              }
            ],
            "type": "event",
            "name": "AddOrder",
            "anonymous": false
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address",
                "indexed": false
              },
              {
                "internalType": "struct ClearStateChange",
                "name": "clearStateChange",
                "type": "tuple",
                "components": [
                  {
                    "internalType": "uint256",
                    "name": "aliceOutput",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "bobOutput",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "aliceInput",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "bobInput",
                    "type": "uint256"
                  }
                ],
                "indexed": false
              }
            ],
            "type": "event",
            "name": "AfterClear",
            "anonymous": false
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address",
                "indexed": false
              },
              {
                "internalType": "struct Order",
                "name": "alice",
                "type": "tuple",
                "components": [
                  {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                  },
                  {
                    "internalType": "bool",
                    "name": "handleIO",
                    "type": "bool"
                  },
                  {
                    "internalType": "struct Evaluable",
                    "name": "evaluable",
                    "type": "tuple",
                    "components": [
                      {
                        "internalType": "contract IInterpreterV1",
                        "name": "interpreter",
                        "type": "address"
                      },
                      {
                        "internalType": "contract IInterpreterStoreV1",
                        "name": "store",
                        "type": "address"
                      },
                      {
                        "internalType": "address",
                        "name": "expression",
                        "type": "address"
                      }
                    ]
                  },
                  {
                    "internalType": "struct IO[]",
                    "name": "validInputs",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint8",
                        "name": "decimals",
                        "type": "uint8"
                      },
                      {
                        "internalType": "uint256",
                        "name": "vaultId",
                        "type": "uint256"
                      }
                    ]
                  },
                  {
                    "internalType": "struct IO[]",
                    "name": "validOutputs",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint8",
                        "name": "decimals",
                        "type": "uint8"
                      },
                      {
                        "internalType": "uint256",
                        "name": "vaultId",
                        "type": "uint256"
                      }
                    ]
                  }
                ],
                "indexed": false
              },
              {
                "internalType": "struct Order",
                "name": "bob",
                "type": "tuple",
                "components": [
                  {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                  },
                  {
                    "internalType": "bool",
                    "name": "handleIO",
                    "type": "bool"
                  },
                  {
                    "internalType": "struct Evaluable",
                    "name": "evaluable",
                    "type": "tuple",
                    "components": [
                      {
                        "internalType": "contract IInterpreterV1",
                        "name": "interpreter",
                        "type": "address"
                      },
                      {
                        "internalType": "contract IInterpreterStoreV1",
                        "name": "store",
                        "type": "address"
                      },
                      {
                        "internalType": "address",
                        "name": "expression",
                        "type": "address"
                      }
                    ]
                  },
                  {
                    "internalType": "struct IO[]",
                    "name": "validInputs",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint8",
                        "name": "decimals",
                        "type": "uint8"
                      },
                      {
                        "internalType": "uint256",
                        "name": "vaultId",
                        "type": "uint256"
                      }
                    ]
                  },
                  {
                    "internalType": "struct IO[]",
                    "name": "validOutputs",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint8",
                        "name": "decimals",
                        "type": "uint8"
                      },
                      {
                        "internalType": "uint256",
                        "name": "vaultId",
                        "type": "uint256"
                      }
                    ]
                  }
                ],
                "indexed": false
              },
              {
                "internalType": "struct ClearConfig",
                "name": "clearConfig",
                "type": "tuple",
                "components": [
                  {
                    "internalType": "uint256",
                    "name": "aliceInputIOIndex",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "aliceOutputIOIndex",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "bobInputIOIndex",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "bobOutputIOIndex",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "aliceBountyVaultId",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "bobBountyVaultId",
                    "type": "uint256"
                  }
                ],
                "indexed": false
              }
            ],
            "type": "event",
            "name": "Clear",
            "anonymous": false
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address",
                "indexed": false
              },
              {
                "internalType": "uint256[][]",
                "name": "context",
                "type": "uint256[][]",
                "indexed": false
              }
            ],
            "type": "event",
            "name": "Context",
            "anonymous": false
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address",
                "indexed": false
              },
              {
                "internalType": "address",
                "name": "token",
                "type": "address",
                "indexed": false
              },
              {
                "internalType": "uint256",
                "name": "vaultId",
                "type": "uint256",
                "indexed": false
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256",
                "indexed": false
              }
            ],
            "type": "event",
            "name": "Deposit",
            "anonymous": false
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address",
                "indexed": false
              },
              {
                "internalType": "address",
                "name": "owner",
                "type": "address",
                "indexed": false
              },
              {
                "internalType": "bytes32",
                "name": "orderHash",
                "type": "bytes32",
                "indexed": false
              }
            ],
            "type": "event",
            "name": "OrderExceedsMaxRatio",
            "anonymous": false
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address",
                "indexed": false
              },
              {
                "internalType": "address",
                "name": "owner",
                "type": "address",
                "indexed": false
              },
              {
                "internalType": "bytes32",
                "name": "orderHash",
                "type": "bytes32",
                "indexed": false
              }
            ],
            "type": "event",
            "name": "OrderNotFound",
            "anonymous": false
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address",
                "indexed": false
              },
              {
                "internalType": "address",
                "name": "owner",
                "type": "address",
                "indexed": false
              },
              {
                "internalType": "bytes32",
                "name": "orderHash",
                "type": "bytes32",
                "indexed": false
              }
            ],
            "type": "event",
            "name": "OrderZeroAmount",
            "anonymous": false
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address",
                "indexed": false
              },
              {
                "internalType": "struct Order",
                "name": "order",
                "type": "tuple",
                "components": [
                  {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                  },
                  {
                    "internalType": "bool",
                    "name": "handleIO",
                    "type": "bool"
                  },
                  {
                    "internalType": "struct Evaluable",
                    "name": "evaluable",
                    "type": "tuple",
                    "components": [
                      {
                        "internalType": "contract IInterpreterV1",
                        "name": "interpreter",
                        "type": "address"
                      },
                      {
                        "internalType": "contract IInterpreterStoreV1",
                        "name": "store",
                        "type": "address"
                      },
                      {
                        "internalType": "address",
                        "name": "expression",
                        "type": "address"
                      }
                    ]
                  },
                  {
                    "internalType": "struct IO[]",
                    "name": "validInputs",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint8",
                        "name": "decimals",
                        "type": "uint8"
                      },
                      {
                        "internalType": "uint256",
                        "name": "vaultId",
                        "type": "uint256"
                      }
                    ]
                  },
                  {
                    "internalType": "struct IO[]",
                    "name": "validOutputs",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint8",
                        "name": "decimals",
                        "type": "uint8"
                      },
                      {
                        "internalType": "uint256",
                        "name": "vaultId",
                        "type": "uint256"
                      }
                    ]
                  }
                ],
                "indexed": false
              },
              {
                "internalType": "bytes32",
                "name": "orderHash",
                "type": "bytes32",
                "indexed": false
              }
            ],
            "type": "event",
            "name": "RemoveOrder",
            "anonymous": false
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address",
                "indexed": false
              },
              {
                "internalType": "struct TakeOrderConfig",
                "name": "config",
                "type": "tuple",
                "components": [
                  {
                    "internalType": "struct Order",
                    "name": "order",
                    "type": "tuple",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                      },
                      {
                        "internalType": "bool",
                        "name": "handleIO",
                        "type": "bool"
                      },
                      {
                        "internalType": "struct Evaluable",
                        "name": "evaluable",
                        "type": "tuple",
                        "components": [
                          {
                            "internalType": "contract IInterpreterV1",
                            "name": "interpreter",
                            "type": "address"
                          },
                          {
                            "internalType": "contract IInterpreterStoreV1",
                            "name": "store",
                            "type": "address"
                          },
                          {
                            "internalType": "address",
                            "name": "expression",
                            "type": "address"
                          }
                        ]
                      },
                      {
                        "internalType": "struct IO[]",
                        "name": "validInputs",
                        "type": "tuple[]",
                        "components": [
                          {
                            "internalType": "address",
                            "name": "token",
                            "type": "address"
                          },
                          {
                            "internalType": "uint8",
                            "name": "decimals",
                            "type": "uint8"
                          },
                          {
                            "internalType": "uint256",
                            "name": "vaultId",
                            "type": "uint256"
                          }
                        ]
                      },
                      {
                        "internalType": "struct IO[]",
                        "name": "validOutputs",
                        "type": "tuple[]",
                        "components": [
                          {
                            "internalType": "address",
                            "name": "token",
                            "type": "address"
                          },
                          {
                            "internalType": "uint8",
                            "name": "decimals",
                            "type": "uint8"
                          },
                          {
                            "internalType": "uint256",
                            "name": "vaultId",
                            "type": "uint256"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "internalType": "uint256",
                    "name": "inputIOIndex",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "outputIOIndex",
                    "type": "uint256"
                  },
                  {
                    "internalType": "struct SignedContextV1[]",
                    "name": "signedContext",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "signer",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256[]",
                        "name": "context",
                        "type": "uint256[]"
                      },
                      {
                        "internalType": "bytes",
                        "name": "signature",
                        "type": "bytes"
                      }
                    ]
                  }
                ],
                "indexed": false
              },
              {
                "internalType": "uint256",
                "name": "input",
                "type": "uint256",
                "indexed": false
              },
              {
                "internalType": "uint256",
                "name": "output",
                "type": "uint256",
                "indexed": false
              }
            ],
            "type": "event",
            "name": "TakeOrder",
            "anonymous": false
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address",
                "indexed": false
              },
              {
                "internalType": "address",
                "name": "token",
                "type": "address",
                "indexed": false
              },
              {
                "internalType": "uint256",
                "name": "vaultId",
                "type": "uint256",
                "indexed": false
              },
              {
                "internalType": "uint256",
                "name": "targetAmount",
                "type": "uint256",
                "indexed": false
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256",
                "indexed": false
              }
            ],
            "type": "event",
            "name": "Withdraw",
            "anonymous": false
          },
          {
            "inputs": [
              {
                "internalType": "struct OrderConfigV2",
                "name": "config",
                "type": "tuple",
                "components": [
                  {
                    "internalType": "struct IO[]",
                    "name": "validInputs",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint8",
                        "name": "decimals",
                        "type": "uint8"
                      },
                      {
                        "internalType": "uint256",
                        "name": "vaultId",
                        "type": "uint256"
                      }
                    ]
                  },
                  {
                    "internalType": "struct IO[]",
                    "name": "validOutputs",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint8",
                        "name": "decimals",
                        "type": "uint8"
                      },
                      {
                        "internalType": "uint256",
                        "name": "vaultId",
                        "type": "uint256"
                      }
                    ]
                  },
                  {
                    "internalType": "struct EvaluableConfigV2",
                    "name": "evaluableConfig",
                    "type": "tuple",
                    "components": [
                      {
                        "internalType": "contract IExpressionDeployerV2",
                        "name": "deployer",
                        "type": "address"
                      },
                      {
                        "internalType": "bytes",
                        "name": "bytecode",
                        "type": "bytes"
                      },
                      {
                        "internalType": "uint256[]",
                        "name": "constants",
                        "type": "uint256[]"
                      }
                    ]
                  },
                  {
                    "internalType": "bytes",
                    "name": "meta",
                    "type": "bytes"
                  }
                ]
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function",
            "name": "addOrder",
            "outputs": [
              {
                "internalType": "bool",
                "name": "stateChanged",
                "type": "bool"
              }
            ]
          },
          {
            "inputs": [
              {
                "internalType": "struct Order",
                "name": "alice",
                "type": "tuple",
                "components": [
                  {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                  },
                  {
                    "internalType": "bool",
                    "name": "handleIO",
                    "type": "bool"
                  },
                  {
                    "internalType": "struct Evaluable",
                    "name": "evaluable",
                    "type": "tuple",
                    "components": [
                      {
                        "internalType": "contract IInterpreterV1",
                        "name": "interpreter",
                        "type": "address"
                      },
                      {
                        "internalType": "contract IInterpreterStoreV1",
                        "name": "store",
                        "type": "address"
                      },
                      {
                        "internalType": "address",
                        "name": "expression",
                        "type": "address"
                      }
                    ]
                  },
                  {
                    "internalType": "struct IO[]",
                    "name": "validInputs",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint8",
                        "name": "decimals",
                        "type": "uint8"
                      },
                      {
                        "internalType": "uint256",
                        "name": "vaultId",
                        "type": "uint256"
                      }
                    ]
                  },
                  {
                    "internalType": "struct IO[]",
                    "name": "validOutputs",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint8",
                        "name": "decimals",
                        "type": "uint8"
                      },
                      {
                        "internalType": "uint256",
                        "name": "vaultId",
                        "type": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "internalType": "struct Order",
                "name": "bob",
                "type": "tuple",
                "components": [
                  {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                  },
                  {
                    "internalType": "bool",
                    "name": "handleIO",
                    "type": "bool"
                  },
                  {
                    "internalType": "struct Evaluable",
                    "name": "evaluable",
                    "type": "tuple",
                    "components": [
                      {
                        "internalType": "contract IInterpreterV1",
                        "name": "interpreter",
                        "type": "address"
                      },
                      {
                        "internalType": "contract IInterpreterStoreV1",
                        "name": "store",
                        "type": "address"
                      },
                      {
                        "internalType": "address",
                        "name": "expression",
                        "type": "address"
                      }
                    ]
                  },
                  {
                    "internalType": "struct IO[]",
                    "name": "validInputs",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint8",
                        "name": "decimals",
                        "type": "uint8"
                      },
                      {
                        "internalType": "uint256",
                        "name": "vaultId",
                        "type": "uint256"
                      }
                    ]
                  },
                  {
                    "internalType": "struct IO[]",
                    "name": "validOutputs",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint8",
                        "name": "decimals",
                        "type": "uint8"
                      },
                      {
                        "internalType": "uint256",
                        "name": "vaultId",
                        "type": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "internalType": "struct ClearConfig",
                "name": "clearConfig",
                "type": "tuple",
                "components": [
                  {
                    "internalType": "uint256",
                    "name": "aliceInputIOIndex",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "aliceOutputIOIndex",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "bobInputIOIndex",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "bobOutputIOIndex",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "aliceBountyVaultId",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "bobBountyVaultId",
                    "type": "uint256"
                  }
                ]
              },
              {
                "internalType": "struct SignedContextV1[]",
                "name": "aliceSignedContext",
                "type": "tuple[]",
                "components": [
                  {
                    "internalType": "address",
                    "name": "signer",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256[]",
                    "name": "context",
                    "type": "uint256[]"
                  },
                  {
                    "internalType": "bytes",
                    "name": "signature",
                    "type": "bytes"
                  }
                ]
              },
              {
                "internalType": "struct SignedContextV1[]",
                "name": "bobSignedContext",
                "type": "tuple[]",
                "components": [
                  {
                    "internalType": "address",
                    "name": "signer",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256[]",
                    "name": "context",
                    "type": "uint256[]"
                  },
                  {
                    "internalType": "bytes",
                    "name": "signature",
                    "type": "bytes"
                  }
                ]
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function",
            "name": "clear"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "token",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "vaultId",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function",
            "name": "deposit"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "token",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function",
            "name": "flashFee",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ]
          },
          {
            "inputs": [
              {
                "internalType": "contract IERC3156FlashBorrower",
                "name": "receiver",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "token",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              },
              {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function",
            "name": "flashLoan",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ]
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "token",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function",
            "name": "maxFlashLoan",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ]
          },
          {
            "inputs": [
              {
                "internalType": "bytes32",
                "name": "orderHash",
                "type": "bytes32"
              }
            ],
            "stateMutability": "view",
            "type": "function",
            "name": "orderExists",
            "outputs": [
              {
                "internalType": "bool",
                "name": "exists",
                "type": "bool"
              }
            ]
          },
          {
            "inputs": [
              {
                "internalType": "struct Order",
                "name": "order",
                "type": "tuple",
                "components": [
                  {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                  },
                  {
                    "internalType": "bool",
                    "name": "handleIO",
                    "type": "bool"
                  },
                  {
                    "internalType": "struct Evaluable",
                    "name": "evaluable",
                    "type": "tuple",
                    "components": [
                      {
                        "internalType": "contract IInterpreterV1",
                        "name": "interpreter",
                        "type": "address"
                      },
                      {
                        "internalType": "contract IInterpreterStoreV1",
                        "name": "store",
                        "type": "address"
                      },
                      {
                        "internalType": "address",
                        "name": "expression",
                        "type": "address"
                      }
                    ]
                  },
                  {
                    "internalType": "struct IO[]",
                    "name": "validInputs",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint8",
                        "name": "decimals",
                        "type": "uint8"
                      },
                      {
                        "internalType": "uint256",
                        "name": "vaultId",
                        "type": "uint256"
                      }
                    ]
                  },
                  {
                    "internalType": "struct IO[]",
                    "name": "validOutputs",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint8",
                        "name": "decimals",
                        "type": "uint8"
                      },
                      {
                        "internalType": "uint256",
                        "name": "vaultId",
                        "type": "uint256"
                      }
                    ]
                  }
                ]
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function",
            "name": "removeOrder",
            "outputs": [
              {
                "internalType": "bool",
                "name": "stateChanged",
                "type": "bool"
              }
            ]
          },
          {
            "inputs": [
              {
                "internalType": "struct TakeOrdersConfigV2",
                "name": "config",
                "type": "tuple",
                "components": [
                  {
                    "internalType": "address",
                    "name": "output",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "input",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "minimumInput",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "maximumInput",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "maximumIORatio",
                    "type": "uint256"
                  },
                  {
                    "internalType": "struct TakeOrderConfig[]",
                    "name": "orders",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "struct Order",
                        "name": "order",
                        "type": "tuple",
                        "components": [
                          {
                            "internalType": "address",
                            "name": "owner",
                            "type": "address"
                          },
                          {
                            "internalType": "bool",
                            "name": "handleIO",
                            "type": "bool"
                          },
                          {
                            "internalType": "struct Evaluable",
                            "name": "evaluable",
                            "type": "tuple",
                            "components": [
                              {
                                "internalType": "contract IInterpreterV1",
                                "name": "interpreter",
                                "type": "address"
                              },
                              {
                                "internalType": "contract IInterpreterStoreV1",
                                "name": "store",
                                "type": "address"
                              },
                              {
                                "internalType": "address",
                                "name": "expression",
                                "type": "address"
                              }
                            ]
                          },
                          {
                            "internalType": "struct IO[]",
                            "name": "validInputs",
                            "type": "tuple[]",
                            "components": [
                              {
                                "internalType": "address",
                                "name": "token",
                                "type": "address"
                              },
                              {
                                "internalType": "uint8",
                                "name": "decimals",
                                "type": "uint8"
                              },
                              {
                                "internalType": "uint256",
                                "name": "vaultId",
                                "type": "uint256"
                              }
                            ]
                          },
                          {
                            "internalType": "struct IO[]",
                            "name": "validOutputs",
                            "type": "tuple[]",
                            "components": [
                              {
                                "internalType": "address",
                                "name": "token",
                                "type": "address"
                              },
                              {
                                "internalType": "uint8",
                                "name": "decimals",
                                "type": "uint8"
                              },
                              {
                                "internalType": "uint256",
                                "name": "vaultId",
                                "type": "uint256"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "internalType": "uint256",
                        "name": "inputIOIndex",
                        "type": "uint256"
                      },
                      {
                        "internalType": "uint256",
                        "name": "outputIOIndex",
                        "type": "uint256"
                      },
                      {
                        "internalType": "struct SignedContextV1[]",
                        "name": "signedContext",
                        "type": "tuple[]",
                        "components": [
                          {
                            "internalType": "address",
                            "name": "signer",
                            "type": "address"
                          },
                          {
                            "internalType": "uint256[]",
                            "name": "context",
                            "type": "uint256[]"
                          },
                          {
                            "internalType": "bytes",
                            "name": "signature",
                            "type": "bytes"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "internalType": "bytes",
                    "name": "data",
                    "type": "bytes"
                  }
                ]
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function",
            "name": "takeOrders",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "totalInput",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "totalOutput",
                "type": "uint256"
              }
            ]
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "token",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "id",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function",
            "name": "vaultBalance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "balance",
                "type": "uint256"
              }
            ]
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "token",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "vaultId",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "targetAmount",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function",
            "name": "withdraw"
          }
        ],
        "devdoc": {
          "kind": "dev",
          "methods": {
            "addOrder(((address,uint8,uint256)[],(address,uint8,uint256)[],(address,bytes,uint256[]),bytes))": {
              "params": {
                "config": "All config required to build an `Order`."
              },
              "returns": {
                "stateChanged": "True if the order was added, false if it already existed."
              }
            },
            "clear((address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),(address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),(uint256,uint256,uint256,uint256,uint256,uint256),(address,uint256[],bytes)[],(address,uint256[],bytes)[])": {
              "params": {
                "alice": "Some order to clear.",
                "aliceSignedContext": "Optional signed context that is relevant to A.",
                "bob": "Another order to clear.",
                "bobSignedContext": "Optional signed context that is relevant to B.",
                "clearConfig": "Additional configuration for the clearance such as how to handle the bounty payment for the `msg.sender`."
              }
            },
            "deposit(address,uint256,uint256)": {
              "params": {
                "amount": "The amount of tokens to deposit.",
                "token": "The token to deposit.",
                "vaultId": "The vault ID to deposit under."
              }
            },
            "flashFee(address,uint256)": {
              "details": "The fee to be charged for a given loan.",
              "params": {
                "amount": "The amount of tokens lent.",
                "token": "The loan currency."
              },
              "returns": {
                "_0": "The amount of `token` to be charged for the loan, on top of the returned principal."
              }
            },
            "flashLoan(address,address,uint256,bytes)": {
              "details": "Initiate a flash loan.",
              "params": {
                "amount": "The amount of tokens lent.",
                "data": "Arbitrary data structure, intended to contain user-defined parameters.",
                "receiver": "The receiver of the tokens in the loan, and the receiver of the callback.",
                "token": "The loan currency."
              }
            },
            "maxFlashLoan(address)": {
              "details": "The amount of currency available to be lent.",
              "params": {
                "token": "The loan currency."
              },
              "returns": {
                "_0": "The amount of `token` that can be borrowed."
              }
            },
            "orderExists(bytes32)": {
              "params": {
                "orderHash": "The hash of the order to check."
              },
              "returns": {
                "exists": "True if the order exists, false otherwise."
              }
            },
            "removeOrder((address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]))": {
              "params": {
                "order": "The `Order` data exactly as it was added."
              },
              "returns": {
                "stateChanged": "True if the order was removed, false if it did not exist."
              }
            },
            "takeOrders((address,address,uint256,uint256,uint256,((address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),uint256,uint256,(address,uint256[],bytes)[])[],bytes))": {
              "params": {
                "config": "The constraints and list of orders to take, orders are processed sequentially in order as provided, there is NO ATTEMPT onchain to predict/filter/sort these orders other than evaluating them as provided. Inputs and outputs are from the perspective of `msg.sender` except for values specified by the orders themselves which are the from the perspective of that order."
              },
              "returns": {
                "totalInput": "Total tokens sent to `msg.sender`, taken from order vaults processed.",
                "totalOutput": "Total tokens taken from `msg.sender` and distributed between vaults."
              }
            },
            "vaultBalance(address,address,uint256)": {
              "params": {
                "id": "The vault ID to read.",
                "owner": "The owner of the vault.",
                "token": "The token the vault is for."
              },
              "returns": {
                "balance": "The current balance of the vault."
              }
            },
            "withdraw(address,uint256,uint256)": {
              "params": {
                "targetAmount": "The amount of tokens to attempt to withdraw. MAY result in fewer tokens withdrawn if the vault balance is lower than the target amount. MAY NOT be zero, the order book MUST revert with `ZeroWithdrawTargetAmount` if the amount is zero.",
                "token": "The token to withdraw.",
                "vaultId": "The vault ID to withdraw from."
              }
            }
          },
          "version": 1
        },
        "userdoc": {
          "kind": "user",
          "methods": {
            "addOrder(((address,uint8,uint256)[],(address,uint8,uint256)[],(address,bytes,uint256[]),bytes))": {
              "notice": "Given an order config, deploys the expression and builds the full `Order` for the config, then records it as an active order. Delegated adding an order is NOT supported. The `msg.sender` that adds an order is ALWAYS the owner and all resulting vault movements are their own. MUST revert with `OrderNoSources` if the order has no associated calculation and `OrderNoHandleIO` if the order has no handle IO entrypoint. The calculation MUST return at least two values from evaluation, the maximum amount and the IO ratio. The handle IO entrypoint SHOULD return zero values from evaluation. Either MAY revert during evaluation on the interpreter, which MUST prevent the order from clearing. MUST revert with `OrderNoInputs` if the order has no inputs. MUST revert with `OrderNoOutputs` if the order has no outputs. If the order already exists, the order book MUST NOT change state, which includes not emitting an event. Instead it MUST return false. If the order book modifies state it MUST emit an `AddOrder` event and return true."
            },
            "clear((address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),(address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),(uint256,uint256,uint256,uint256,uint256,uint256),(address,uint256[],bytes)[],(address,uint256[],bytes)[])": {
              "notice": "Allows `msg.sender` to match two live orders placed earlier by non-interactive parties and claim a bounty in the process. The clearer is free to select any two live orders on the order book for matching and as long as they have compatible tokens, ratios and amounts, the orders will clear. Clearing the orders DOES NOT remove them from the orderbook, they remain live until explicitly removed by their owner. Even if the input vault balances are completely emptied, the orders remain live until removed. This allows order owners to deploy a strategy over a long period of time and periodically top up the input vaults. Clearing two orders from the same owner is disallowed. Any mismatch in the ratios between the two orders will cause either more inputs than there are available outputs (transaction will revert) or less inputs than there are available outputs. In the latter case the excess outputs are given to the `msg.sender` of clear, to the vaults they specify in the clear config. This not only incentivises \"automatic\" clear calls for both alice and bob, but incentivises _prioritising greater ratio differences_ with a larger bounty. The second point is important because it implicitly prioritises orders that are further from the current market price, thus putting constant increasing pressure on the entire system the further it drifts from the norm, no matter how esoteric the individual order expressions and sizings might be. All else equal there are several factors that would impact how reliably some order clears relative to the wider market, such as: - Bounties are effectively percentages of cleared amounts so larger   orders have larger bounties and cover gas costs more easily - High gas on the network means that orders are harder to clear   profitably so the negative spread of the ratios will need to be larger - Complex and stateful expressions cost more gas to evalulate so the   negative spread will need to be larger - Erratic behavior of the order owner could reduce the willingness of   third parties to interact if it could result in wasted gas due to   orders suddently being removed before clearance etc. - Dynamic and highly volatile words used in the expression could be   ignored or low priority by clearers who want to be sure that they can   accurately predict the ratios that they include in their clearance - Geopolitical issues such as sanctions and regulatory restrictions could   cause issues for certain owners and clearers"
            },
            "deposit(address,uint256,uint256)": {
              "notice": "Vault IDs are namespaced by the token address so there is no risk of collision between tokens. For example, vault ID 0 for token A is completely different to vault ID 0 for token B. `0` amount deposits are unsupported as underlying token contracts handle `0` value transfers differently and this would be a source of confusion. The order book MUST revert with `ZeroDepositAmount` if the amount is zero."
            },
            "orderExists(bytes32)": {
              "notice": "Returns true if the order exists, false otherwise."
            },
            "removeOrder((address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]))": {
              "notice": "Order owner can remove their own orders. Delegated order removal is NOT supported and will revert. Removing an order multiple times or removing an order that never existed are valid, the event will be emitted and the transaction will complete with that order hash definitely, redundantly not live."
            },
            "takeOrders((address,address,uint256,uint256,uint256,((address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),uint256,uint256,(address,uint256[],bytes)[])[],bytes))": {
              "notice": "Allows `msg.sender` to attempt to fill a list of orders in sequence without needing to place their own order and clear them. This works like a market buy but against a specific set of orders. Every order will looped over and calculated individually then filled maximally until the request input is reached for the `msg.sender`. The `msg.sender` is responsible for selecting the best orders at the time according to their criteria and MAY specify a maximum IO ratio to guard against an order spiking the ratio beyond what the `msg.sender` expected and is comfortable with. As orders may be removed and calculate their ratios dynamically, all issues fulfilling an order other than misconfiguration by the `msg.sender` are no-ops and DO NOT revert the transaction. This allows the `msg.sender` to optimistically provide a list of orders that they aren't sure will completely fill at a good price, and fallback to more reliable orders further down their list. Misconfiguration such as token mismatches are errors that revert as this is known and static at all times to the `msg.sender` so MUST be provided correctly. `msg.sender` MAY specify a minimum input that MUST be reached across all orders in the list, otherwise the transaction will revert, this MAY be set to zero. Exactly like withdraw, if there is an active flash loan for `msg.sender` they will have their outstanding loan reduced by the final input amount preferentially before sending any tokens. Notably this allows arb bots implemented as flash loan borrowers to connect orders against external liquidity directly by paying back the loan with a `takeOrders` call and outputting the result of the external trade. Rounding errors always favour the order never the `msg.sender`."
            },
            "vaultBalance(address,address,uint256)": {
              "notice": "Get the current balance of a vault for a given owner, token and vault ID."
            },
            "withdraw(address,uint256,uint256)": {
              "notice": "Allows the sender to withdraw any tokens from their own vaults. If the withrawer has an active flash loan debt denominated in the same token being withdrawn then Orderbook will merely reduce the debt and NOT send the amount of tokens repaid to the flashloan debt. MUST revert if the amount _requested_ to withdraw is zero. The withdrawal MAY still not move any tokens (without revert) if the vault balance is zero, or the withdrawal is used to repay a flash loan, or due to any other internal accounting."
            }
          },
          "version": 1
        }
      },
      "settings": {
        "remappings": [
          "@prb/test/=lib/rain.interpreter/lib/prb-math/lib/prb-test/src/",
          "bytecode/=lib/rain.interpreter/src/lib/bytecode/",
          "caller/=lib/rain.interpreter/src/lib/caller/",
          "compile/=lib/rain.interpreter/src/lib/compile/",
          "ds-test/=lib/forge-std/lib/ds-test/src/",
          "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
          "eval/=lib/rain.interpreter/src/lib/eval/",
          "extern/=lib/rain.interpreter/src/lib/extern/",
          "forge-std/=lib/forge-std/src/",
          "integrity/=lib/rain.interpreter/src/lib/integrity/",
          "ns/=lib/rain.interpreter/src/lib/ns/",
          "op/=lib/rain.interpreter/src/lib/op/",
          "openzeppelin-contracts/=lib/openzeppelin-contracts/",
          "openzeppelin/=lib/openzeppelin-contracts/contracts/",
          "parse/=lib/rain.interpreter/src/lib/parse/",
          "prb-math/=lib/rain.interpreter/lib/prb-math/src/",
          "prb-test/=lib/rain.interpreter/lib/prb-math/lib/prb-test/src/",
          "rain.chainlink/=lib/rain.interpreter/lib/rain.chainlink/src/",
          "rain.datacontract/=lib/rain.datacontract/src/",
          "rain.erc1820/=lib/rain.erc1820/src/",
          "rain.extrospection/=lib/rain.factory/lib/rain.extrospection/",
          "rain.factory/=lib/rain.factory/",
          "rain.interpreter/=lib/rain.interpreter/",
          "rain.lib.hash/=lib/rain.lib.memkv/lib/rain.lib.hash/src/",
          "rain.lib.memkv/=lib/rain.lib.memkv/src/",
          "rain.lib.typecast/=lib/rain.interpreter/lib/rain.lib.typecast/src/",
          "rain.math.fixedpoint/=lib/rain.math.fixedpoint/src/",
          "rain.math.saturating/=lib/rain.math.fixedpoint/lib/rain.math.saturating/src/",
          "rain.metadata/=lib/rain.metadata/src/",
          "rain.solmem/=lib/rain.datacontract/lib/rain.solmem/src/",
          "sol.lib.binmaskflag/=lib/rain.interpreter/lib/sol.lib.binmaskflag/src/",
          "state/=lib/rain.interpreter/src/lib/state/",
          "uniswap/=lib/rain.interpreter/src/lib/uniswap/",
          "v2-core/=lib/rain.interpreter/lib/v2-core/contracts/",
          "v2-periphery/=lib/rain.interpreter/lib/v2-periphery/contracts/"
        ],
        "optimizer": {
          "enabled": true,
          "runs": 1000000
        },
        "metadata": {
          "bytecodeHash": "none",
          "appendCBOR": false
        },
        "compilationTarget": {
          "src/interface/unstable/IOrderBookV3.sol": "IOrderBookV3"
        },
        "libraries": {}
      },
      "sources": {
        "lib/rain.interpreter/src/interface/IExpressionDeployerV1.sol": {
          "keccak256": "0x42d4d91cc62778967ca5f1bb2e7b2c97ca2de2c49518bc8a08a0b50275074ab6",
          "urls": [
            "bzz-raw://6f461a0c0f65a514799200a64bc0e9d926abe4e0bba0c4e2ca0e3d6a04677768",
            "dweb:/ipfs/QmeUggk58ypM3721672wdupquFM8W9VnY3qpn8swKoeLhA"
          ],
          "license": "CAL"
        },
        "lib/rain.interpreter/src/interface/IInterpreterCallerV2.sol": {
          "keccak256": "0xdbcd86209f48d96355da6e3f1c7f09530667f62544aa43b7058fe99063a20b6e",
          "urls": [
            "bzz-raw://b3803c98391a7db85b12c2ad9858abcda0022d0c004aabdad5ea736959a8ac0f",
            "dweb:/ipfs/QmbL5b4Rz1H4ZPVQzLET8UrQqXiUBnbwCkdUE6jHqPcapN"
          ],
          "license": "CAL"
        },
        "lib/rain.interpreter/src/interface/IInterpreterStoreV1.sol": {
          "keccak256": "0xbd9baa8cd30406576f876a76f1c08396561ba93131741af338f63e2414e20619",
          "urls": [
            "bzz-raw://30bb6f09d8b8f27f77e6c44591c4f2070286a91dad202043cf2351ae802e3df5",
            "dweb:/ipfs/QmRz5pfzf5w84iNmKaYYbqP8oQywzc5xbd3xzKmxgFyf9y"
          ],
          "license": "CAL"
        },
        "lib/rain.interpreter/src/interface/IInterpreterV1.sol": {
          "keccak256": "0xebde08ca2e1c25fc733e0bb8867598715f8ba79772f86db1c8960ad7d68a5293",
          "urls": [
            "bzz-raw://b93fb28a09aeea4afe7f0d4afc67354c0fa538e5a9b274b0c5f10ed1dd6b6b00",
            "dweb:/ipfs/QmatNhoHRSJ1ZvoCNo61YMt9jb1vvEkWy3mkcoPkB4FFA9"
          ],
          "license": "CAL"
        },
        "lib/rain.interpreter/src/interface/unstable/IExpressionDeployerV2.sol": {
          "keccak256": "0x7bbcf9d3689bdecdc58537e5185f0b88e8d4e91a295f5124f19779609f19f219",
          "urls": [
            "bzz-raw://ccdcba71f76f2a730685f956f1854355751a3c9b4caef9569e2a6d8acc8747a5",
            "dweb:/ipfs/QmQrWgCnxd9aGEHhmFTPkA8E3GVsKuwDhe2UQ5WyfA5LSA"
          ],
          "license": "CAL"
        },
        "lib/rain.interpreter/src/lib/caller/LibEvaluable.sol": {
          "keccak256": "0x9bd77a3efb7e0762ca214efe30c3c49c3f3efae3b6c759db2c7a0aa52ff3d364",
          "urls": [
            "bzz-raw://6125b3bd94d9966557c068dda143c930d37662da06cd84a4369a673f4ce8b07c",
            "dweb:/ipfs/QmepFEJseAU31gPAa7Hq2H3ZDfRJ3DnK94CBpe73H3v7yP"
          ],
          "license": "CAL"
        },
        "src/interface/ierc3156/IERC3156FlashBorrower.sol": {
          "keccak256": "0x493227b1bc21c04ba2506d8d63f8fab8eb828683cf41336db1076edee2e010a7",
          "urls": [
            "bzz-raw://99b27f1f11576c22462c93ab613835522dfc89a7e28e584df034b339187bc15c",
            "dweb:/ipfs/QmQZ1H8PotScE5rSbruZn97MC6pgDNTuCQcjtg8ZWU4SPB"
          ],
          "license": "CC0"
        },
        "src/interface/ierc3156/IERC3156FlashLender.sol": {
          "keccak256": "0x191637dc4503bf6cc0c6c0539bf83a758b124e37abc5da05ae4d446133cf36b5",
          "urls": [
            "bzz-raw://de7dea1fd8bd0dcdae7bdb400d4ccc9e01ecb73e23ef2b2f77704a9741669273",
            "dweb:/ipfs/QmT8BAK76nEJ5kTKkDxDovD4xuAXPACAyxshUA4RX3WLe3"
          ],
          "license": "CC0"
        },
        "src/interface/unstable/IOrderBookV3.sol": {
          "keccak256": "0x903dd3592407606a21384487d60f6d262848358c904b4de0756731c9cba777ae",
          "urls": [
            "bzz-raw://98a2c9621a42ad45172c6045322f928a86481954107bde73fded74c3368764e6",
            "dweb:/ipfs/QmeMwBRZz9qE3RV7drutNSAjCQVRmt9FZbKsZC2jcPixcg"
          ],
          "license": "CAL"
        }
      },
      "version": 1
    },
    "ast": {
      "absolutePath": "src/interface/unstable/IOrderBookV3.sol",
      "id": 75939,
      "exportedSymbols": {
        "ClearConfig": [
          75687
        ],
        "ClearStateChange": [
          75696
        ],
        "DEFAULT_STATE_NAMESPACE": [
          55808
        ],
        "EncodedDispatch": [
          55796
        ],
        "Evaluable": [
          56802
        ],
        "EvaluableConfig": [
          56784
        ],
        "EvaluableConfigV2": [
          56793
        ],
        "FullyQualifiedNamespace": [
          55757
        ],
        "IERC1820_NAME_IEXPRESSION_DEPLOYER_V1": [
          55686
        ],
        "IERC1820_NAME_IEXPRESSION_DEPLOYER_V2": [
          55925
        ],
        "IERC3156FlashBorrower": [
          75566
        ],
        "IERC3156FlashLender": [
          75603
        ],
        "IExpressionDeployerV1": [
          55722
        ],
        "IExpressionDeployerV2": [
          55960
        ],
        "IInterpreterCallerV2": [
          55752
        ],
        "IInterpreterStoreV1": [
          55789
        ],
        "IInterpreterV1": [
          55839
        ],
        "IO": [
          75615
        ],
        "IOrderBookV3": [
          75938
        ],
        "LibEvaluable": [
          56815
        ],
        "NO_STORE": [
          55766
        ],
        "ON_FLASH_LOAN_CALLBACK_SUCCESS": [
          75549
        ],
        "Operand": [
          55800
        ],
        "Order": [
          75645
        ],
        "OrderConfigV2": [
          75629
        ],
        "SIGNED_CONTEXT_CONTEXT_OFFSET": [
          55738
        ],
        "SIGNED_CONTEXT_SIGNATURE_OFFSET": [
          55741
        ],
        "SIGNED_CONTEXT_SIGNER_OFFSET": [
          55735
        ],
        "SignedContextV1": [
          55732
        ],
        "SourceIndex": [
          55794
        ],
        "StateNamespace": [
          55798
        ],
        "TakeOrderConfig": [
          75674
        ],
        "TakeOrdersConfigV2": [
          75662
        ]
      },
      "nodeType": "SourceUnit",
      "src": "32:34214:164",
      "nodes": [
        {
          "id": 75605,
          "nodeType": "PragmaDirective",
          "src": "32:24:164",
          "nodes": [],
          "literals": [
            "solidity",
            "^",
            "0.8",
            ".18"
          ]
        },
        {
          "id": 75606,
          "nodeType": "ImportDirective",
          "src": "58:45:164",
          "nodes": [],
          "absolutePath": "src/interface/ierc3156/IERC3156FlashLender.sol",
          "file": "../ierc3156/IERC3156FlashLender.sol",
          "nameLocation": "-1:-1:-1",
          "scope": 75939,
          "sourceUnit": 75604,
          "symbolAliases": [],
          "unitAlias": ""
        },
        {
          "id": 75607,
          "nodeType": "ImportDirective",
          "src": "104:58:164",
          "nodes": [],
          "absolutePath": "lib/rain.interpreter/src/lib/caller/LibEvaluable.sol",
          "file": "rain.interpreter/src/lib/caller/LibEvaluable.sol",
          "nameLocation": "-1:-1:-1",
          "scope": 75939,
          "sourceUnit": 56816,
          "symbolAliases": [],
          "unitAlias": ""
        },
        {
          "id": 75608,
          "nodeType": "ImportDirective",
          "src": "163:65:164",
          "nodes": [],
          "absolutePath": "lib/rain.interpreter/src/interface/IInterpreterCallerV2.sol",
          "file": "rain.interpreter/src/interface/IInterpreterCallerV2.sol",
          "nameLocation": "-1:-1:-1",
          "scope": 75939,
          "sourceUnit": 55753,
          "symbolAliases": [],
          "unitAlias": ""
        },
        {
          "id": 75615,
          "nodeType": "StructDefinition",
          "src": "1224:73:164",
          "nodes": [],
          "canonicalName": "IO",
          "members": [
            {
              "constant": false,
              "id": 75610,
              "mutability": "mutable",
              "name": "token",
              "nameLocation": "1248:5:164",
              "nodeType": "VariableDeclaration",
              "scope": 75615,
              "src": "1240:13:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "typeName": {
                "id": 75609,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1240:7:164",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75612,
              "mutability": "mutable",
              "name": "decimals",
              "nameLocation": "1265:8:164",
              "nodeType": "VariableDeclaration",
              "scope": 75615,
              "src": "1259:14:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint8",
                "typeString": "uint8"
              },
              "typeName": {
                "id": 75611,
                "name": "uint8",
                "nodeType": "ElementaryTypeName",
                "src": "1259:5:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint8",
                  "typeString": "uint8"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75614,
              "mutability": "mutable",
              "name": "vaultId",
              "nameLocation": "1287:7:164",
              "nodeType": "VariableDeclaration",
              "scope": 75615,
              "src": "1279:15:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 75613,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1279:7:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            }
          ],
          "name": "IO",
          "nameLocation": "1231:2:164",
          "scope": 75939,
          "visibility": "public"
        },
        {
          "id": 75629,
          "nodeType": "StructDefinition",
          "src": "2093:124:164",
          "nodes": [],
          "canonicalName": "OrderConfigV2",
          "members": [
            {
              "constant": false,
              "id": 75619,
              "mutability": "mutable",
              "name": "validInputs",
              "nameLocation": "2125:11:164",
              "nodeType": "VariableDeclaration",
              "scope": 75629,
              "src": "2120:16:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_IO_$75615_storage_$dyn_storage_ptr",
                "typeString": "struct IO[]"
              },
              "typeName": {
                "baseType": {
                  "id": 75617,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 75616,
                    "name": "IO",
                    "nameLocations": [
                      "2120:2:164"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 75615,
                    "src": "2120:2:164"
                  },
                  "referencedDeclaration": 75615,
                  "src": "2120:2:164",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_IO_$75615_storage_ptr",
                    "typeString": "struct IO"
                  }
                },
                "id": 75618,
                "nodeType": "ArrayTypeName",
                "src": "2120:4:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_struct$_IO_$75615_storage_$dyn_storage_ptr",
                  "typeString": "struct IO[]"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75623,
              "mutability": "mutable",
              "name": "validOutputs",
              "nameLocation": "2147:12:164",
              "nodeType": "VariableDeclaration",
              "scope": 75629,
              "src": "2142:17:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_IO_$75615_storage_$dyn_storage_ptr",
                "typeString": "struct IO[]"
              },
              "typeName": {
                "baseType": {
                  "id": 75621,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 75620,
                    "name": "IO",
                    "nameLocations": [
                      "2142:2:164"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 75615,
                    "src": "2142:2:164"
                  },
                  "referencedDeclaration": 75615,
                  "src": "2142:2:164",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_IO_$75615_storage_ptr",
                    "typeString": "struct IO"
                  }
                },
                "id": 75622,
                "nodeType": "ArrayTypeName",
                "src": "2142:4:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_struct$_IO_$75615_storage_$dyn_storage_ptr",
                  "typeString": "struct IO[]"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75626,
              "mutability": "mutable",
              "name": "evaluableConfig",
              "nameLocation": "2183:15:164",
              "nodeType": "VariableDeclaration",
              "scope": 75629,
              "src": "2165:33:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_EvaluableConfigV2_$56793_storage_ptr",
                "typeString": "struct EvaluableConfigV2"
              },
              "typeName": {
                "id": 75625,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 75624,
                  "name": "EvaluableConfigV2",
                  "nameLocations": [
                    "2165:17:164"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 56793,
                  "src": "2165:17:164"
                },
                "referencedDeclaration": 56793,
                "src": "2165:17:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_EvaluableConfigV2_$56793_storage_ptr",
                  "typeString": "struct EvaluableConfigV2"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75628,
              "mutability": "mutable",
              "name": "meta",
              "nameLocation": "2210:4:164",
              "nodeType": "VariableDeclaration",
              "scope": 75629,
              "src": "2204:10:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              },
              "typeName": {
                "id": 75627,
                "name": "bytes",
                "nodeType": "ElementaryTypeName",
                "src": "2204:5:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_storage_ptr",
                  "typeString": "bytes"
                }
              },
              "visibility": "internal"
            }
          ],
          "name": "OrderConfigV2",
          "nameLocation": "2100:13:164",
          "scope": 75939,
          "visibility": "public"
        },
        {
          "id": 75645,
          "nodeType": "StructDefinition",
          "src": "3140:124:164",
          "nodes": [],
          "canonicalName": "Order",
          "members": [
            {
              "constant": false,
              "id": 75631,
              "mutability": "mutable",
              "name": "owner",
              "nameLocation": "3167:5:164",
              "nodeType": "VariableDeclaration",
              "scope": 75645,
              "src": "3159:13:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "typeName": {
                "id": 75630,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "3159:7:164",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75633,
              "mutability": "mutable",
              "name": "handleIO",
              "nameLocation": "3183:8:164",
              "nodeType": "VariableDeclaration",
              "scope": 75645,
              "src": "3178:13:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "typeName": {
                "id": 75632,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "3178:4:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75636,
              "mutability": "mutable",
              "name": "evaluable",
              "nameLocation": "3207:9:164",
              "nodeType": "VariableDeclaration",
              "scope": 75645,
              "src": "3197:19:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Evaluable_$56802_storage_ptr",
                "typeString": "struct Evaluable"
              },
              "typeName": {
                "id": 75635,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 75634,
                  "name": "Evaluable",
                  "nameLocations": [
                    "3197:9:164"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 56802,
                  "src": "3197:9:164"
                },
                "referencedDeclaration": 56802,
                "src": "3197:9:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Evaluable_$56802_storage_ptr",
                  "typeString": "struct Evaluable"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75640,
              "mutability": "mutable",
              "name": "validInputs",
              "nameLocation": "3227:11:164",
              "nodeType": "VariableDeclaration",
              "scope": 75645,
              "src": "3222:16:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_IO_$75615_storage_$dyn_storage_ptr",
                "typeString": "struct IO[]"
              },
              "typeName": {
                "baseType": {
                  "id": 75638,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 75637,
                    "name": "IO",
                    "nameLocations": [
                      "3222:2:164"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 75615,
                    "src": "3222:2:164"
                  },
                  "referencedDeclaration": 75615,
                  "src": "3222:2:164",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_IO_$75615_storage_ptr",
                    "typeString": "struct IO"
                  }
                },
                "id": 75639,
                "nodeType": "ArrayTypeName",
                "src": "3222:4:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_struct$_IO_$75615_storage_$dyn_storage_ptr",
                  "typeString": "struct IO[]"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75644,
              "mutability": "mutable",
              "name": "validOutputs",
              "nameLocation": "3249:12:164",
              "nodeType": "VariableDeclaration",
              "scope": 75645,
              "src": "3244:17:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_IO_$75615_storage_$dyn_storage_ptr",
                "typeString": "struct IO[]"
              },
              "typeName": {
                "baseType": {
                  "id": 75642,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 75641,
                    "name": "IO",
                    "nameLocations": [
                      "3244:2:164"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 75615,
                    "src": "3244:2:164"
                  },
                  "referencedDeclaration": 75615,
                  "src": "3244:2:164",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_IO_$75615_storage_ptr",
                    "typeString": "struct IO"
                  }
                },
                "id": 75643,
                "nodeType": "ArrayTypeName",
                "src": "3244:4:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_struct$_IO_$75615_storage_$dyn_storage_ptr",
                  "typeString": "struct IO[]"
                }
              },
              "visibility": "internal"
            }
          ],
          "name": "Order",
          "nameLocation": "3147:5:164",
          "scope": 75939,
          "visibility": "public"
        },
        {
          "id": 75662,
          "nodeType": "StructDefinition",
          "src": "4384:194:164",
          "nodes": [],
          "canonicalName": "TakeOrdersConfigV2",
          "members": [
            {
              "constant": false,
              "id": 75647,
              "mutability": "mutable",
              "name": "output",
              "nameLocation": "4424:6:164",
              "nodeType": "VariableDeclaration",
              "scope": 75662,
              "src": "4416:14:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "typeName": {
                "id": 75646,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "4416:7:164",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75649,
              "mutability": "mutable",
              "name": "input",
              "nameLocation": "4444:5:164",
              "nodeType": "VariableDeclaration",
              "scope": 75662,
              "src": "4436:13:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "typeName": {
                "id": 75648,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "4436:7:164",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75651,
              "mutability": "mutable",
              "name": "minimumInput",
              "nameLocation": "4463:12:164",
              "nodeType": "VariableDeclaration",
              "scope": 75662,
              "src": "4455:20:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 75650,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "4455:7:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75653,
              "mutability": "mutable",
              "name": "maximumInput",
              "nameLocation": "4489:12:164",
              "nodeType": "VariableDeclaration",
              "scope": 75662,
              "src": "4481:20:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 75652,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "4481:7:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75655,
              "mutability": "mutable",
              "name": "maximumIORatio",
              "nameLocation": "4515:14:164",
              "nodeType": "VariableDeclaration",
              "scope": 75662,
              "src": "4507:22:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 75654,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "4507:7:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75659,
              "mutability": "mutable",
              "name": "orders",
              "nameLocation": "4553:6:164",
              "nodeType": "VariableDeclaration",
              "scope": 75662,
              "src": "4535:24:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_TakeOrderConfig_$75674_storage_$dyn_storage_ptr",
                "typeString": "struct TakeOrderConfig[]"
              },
              "typeName": {
                "baseType": {
                  "id": 75657,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 75656,
                    "name": "TakeOrderConfig",
                    "nameLocations": [
                      "4535:15:164"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 75674,
                    "src": "4535:15:164"
                  },
                  "referencedDeclaration": 75674,
                  "src": "4535:15:164",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_TakeOrderConfig_$75674_storage_ptr",
                    "typeString": "struct TakeOrderConfig"
                  }
                },
                "id": 75658,
                "nodeType": "ArrayTypeName",
                "src": "4535:17:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_struct$_TakeOrderConfig_$75674_storage_$dyn_storage_ptr",
                  "typeString": "struct TakeOrderConfig[]"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75661,
              "mutability": "mutable",
              "name": "data",
              "nameLocation": "4571:4:164",
              "nodeType": "VariableDeclaration",
              "scope": 75662,
              "src": "4565:10:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              },
              "typeName": {
                "id": 75660,
                "name": "bytes",
                "nodeType": "ElementaryTypeName",
                "src": "4565:5:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_storage_ptr",
                  "typeString": "bytes"
                }
              },
              "visibility": "internal"
            }
          ],
          "name": "TakeOrdersConfigV2",
          "nameLocation": "4391:18:164",
          "scope": 75939,
          "visibility": "public"
        },
        {
          "id": 75674,
          "nodeType": "StructDefinition",
          "src": "5042:133:164",
          "nodes": [],
          "canonicalName": "TakeOrderConfig",
          "members": [
            {
              "constant": false,
              "id": 75665,
              "mutability": "mutable",
              "name": "order",
              "nameLocation": "5077:5:164",
              "nodeType": "VariableDeclaration",
              "scope": 75674,
              "src": "5071:11:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Order_$75645_storage_ptr",
                "typeString": "struct Order"
              },
              "typeName": {
                "id": 75664,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 75663,
                  "name": "Order",
                  "nameLocations": [
                    "5071:5:164"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 75645,
                  "src": "5071:5:164"
                },
                "referencedDeclaration": 75645,
                "src": "5071:5:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Order_$75645_storage_ptr",
                  "typeString": "struct Order"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75667,
              "mutability": "mutable",
              "name": "inputIOIndex",
              "nameLocation": "5096:12:164",
              "nodeType": "VariableDeclaration",
              "scope": 75674,
              "src": "5088:20:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 75666,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "5088:7:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75669,
              "mutability": "mutable",
              "name": "outputIOIndex",
              "nameLocation": "5122:13:164",
              "nodeType": "VariableDeclaration",
              "scope": 75674,
              "src": "5114:21:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 75668,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "5114:7:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75673,
              "mutability": "mutable",
              "name": "signedContext",
              "nameLocation": "5159:13:164",
              "nodeType": "VariableDeclaration",
              "scope": 75674,
              "src": "5141:31:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_SignedContextV1_$55732_storage_$dyn_storage_ptr",
                "typeString": "struct SignedContextV1[]"
              },
              "typeName": {
                "baseType": {
                  "id": 75671,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 75670,
                    "name": "SignedContextV1",
                    "nameLocations": [
                      "5141:15:164"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 55732,
                    "src": "5141:15:164"
                  },
                  "referencedDeclaration": 55732,
                  "src": "5141:15:164",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_SignedContextV1_$55732_storage_ptr",
                    "typeString": "struct SignedContextV1"
                  }
                },
                "id": 75672,
                "nodeType": "ArrayTypeName",
                "src": "5141:17:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_struct$_SignedContextV1_$55732_storage_$dyn_storage_ptr",
                  "typeString": "struct SignedContextV1[]"
                }
              },
              "visibility": "internal"
            }
          ],
          "name": "TakeOrderConfig",
          "nameLocation": "5049:15:164",
          "scope": 75939,
          "visibility": "public"
        },
        {
          "id": 75687,
          "nodeType": "StructDefinition",
          "src": "5822:206:164",
          "nodes": [],
          "canonicalName": "ClearConfig",
          "members": [
            {
              "constant": false,
              "id": 75676,
              "mutability": "mutable",
              "name": "aliceInputIOIndex",
              "nameLocation": "5855:17:164",
              "nodeType": "VariableDeclaration",
              "scope": 75687,
              "src": "5847:25:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 75675,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "5847:7:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75678,
              "mutability": "mutable",
              "name": "aliceOutputIOIndex",
              "nameLocation": "5886:18:164",
              "nodeType": "VariableDeclaration",
              "scope": 75687,
              "src": "5878:26:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 75677,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "5878:7:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75680,
              "mutability": "mutable",
              "name": "bobInputIOIndex",
              "nameLocation": "5918:15:164",
              "nodeType": "VariableDeclaration",
              "scope": 75687,
              "src": "5910:23:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 75679,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "5910:7:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75682,
              "mutability": "mutable",
              "name": "bobOutputIOIndex",
              "nameLocation": "5947:16:164",
              "nodeType": "VariableDeclaration",
              "scope": 75687,
              "src": "5939:24:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 75681,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "5939:7:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75684,
              "mutability": "mutable",
              "name": "aliceBountyVaultId",
              "nameLocation": "5977:18:164",
              "nodeType": "VariableDeclaration",
              "scope": 75687,
              "src": "5969:26:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 75683,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "5969:7:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75686,
              "mutability": "mutable",
              "name": "bobBountyVaultId",
              "nameLocation": "6009:16:164",
              "nodeType": "VariableDeclaration",
              "scope": 75687,
              "src": "6001:24:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 75685,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "6001:7:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            }
          ],
          "name": "ClearConfig",
          "nameLocation": "5829:11:164",
          "scope": 75939,
          "visibility": "public"
        },
        {
          "id": 75696,
          "nodeType": "StructDefinition",
          "src": "6722:121:164",
          "nodes": [],
          "canonicalName": "ClearStateChange",
          "members": [
            {
              "constant": false,
              "id": 75689,
              "mutability": "mutable",
              "name": "aliceOutput",
              "nameLocation": "6760:11:164",
              "nodeType": "VariableDeclaration",
              "scope": 75696,
              "src": "6752:19:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 75688,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "6752:7:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75691,
              "mutability": "mutable",
              "name": "bobOutput",
              "nameLocation": "6785:9:164",
              "nodeType": "VariableDeclaration",
              "scope": 75696,
              "src": "6777:17:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 75690,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "6777:7:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75693,
              "mutability": "mutable",
              "name": "aliceInput",
              "nameLocation": "6808:10:164",
              "nodeType": "VariableDeclaration",
              "scope": 75696,
              "src": "6800:18:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 75692,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "6800:7:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            },
            {
              "constant": false,
              "id": 75695,
              "mutability": "mutable",
              "name": "bobInput",
              "nameLocation": "6832:8:164",
              "nodeType": "VariableDeclaration",
              "scope": 75696,
              "src": "6824:16:164",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 75694,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "6824:7:164",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            }
          ],
          "name": "ClearStateChange",
          "nameLocation": "6729:16:164",
          "scope": 75939,
          "visibility": "public"
        },
        {
          "id": 75938,
          "nodeType": "ContractDefinition",
          "src": "15546:18699:164",
          "nodes": [
            {
              "id": 75710,
              "nodeType": "ErrorDefinition",
              "src": "15855:72:164",
              "nodes": [],
              "documentation": {
                "id": 75702,
                "nodeType": "StructuredDocumentation",
                "src": "15620:230:164",
                "text": "MUST be thrown by `deposit` if the amount is zero.\n @param sender `msg.sender` depositing tokens.\n @param token The token being deposited.\n @param vaultId The vault ID the tokens are being deposited under."
              },
              "errorSelector": "40e97a5e",
              "name": "ZeroDepositAmount",
              "nameLocation": "15861:17:164",
              "parameters": {
                "id": 75709,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75704,
                    "mutability": "mutable",
                    "name": "sender",
                    "nameLocation": "15887:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75710,
                    "src": "15879:14:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75703,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "15879:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75706,
                    "mutability": "mutable",
                    "name": "token",
                    "nameLocation": "15903:5:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75710,
                    "src": "15895:13:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75705,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "15895:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75708,
                    "mutability": "mutable",
                    "name": "vaultId",
                    "nameLocation": "15918:7:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75710,
                    "src": "15910:15:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 75707,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "15910:7:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "15878:48:164"
              }
            },
            {
              "id": 75719,
              "nodeType": "ErrorDefinition",
              "src": "16333:79:164",
              "nodes": [],
              "documentation": {
                "id": 75711,
                "nodeType": "StructuredDocumentation",
                "src": "15933:395:164",
                "text": "MUST be thrown by `withdraw` if the amount _requested_ to withdraw is\n zero. The withdrawal MAY still not move any tokens if the vault balance\n is zero, or the withdrawal is used to repay a flash loan.\n @param sender `msg.sender` withdrawing tokens.\n @param token The token being withdrawn.\n @param vaultId The vault ID the tokens are being withdrawn from."
              },
              "errorSelector": "f7a898f6",
              "name": "ZeroWithdrawTargetAmount",
              "nameLocation": "16339:24:164",
              "parameters": {
                "id": 75718,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75713,
                    "mutability": "mutable",
                    "name": "sender",
                    "nameLocation": "16372:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75719,
                    "src": "16364:14:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75712,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "16364:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75715,
                    "mutability": "mutable",
                    "name": "token",
                    "nameLocation": "16388:5:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75719,
                    "src": "16380:13:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75714,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "16380:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75717,
                    "mutability": "mutable",
                    "name": "vaultId",
                    "nameLocation": "16403:7:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75719,
                    "src": "16395:15:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 75716,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "16395:7:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "16363:48:164"
              }
            },
            {
              "id": 75724,
              "nodeType": "ErrorDefinition",
              "src": "16552:37:164",
              "nodes": [],
              "documentation": {
                "id": 75720,
                "nodeType": "StructuredDocumentation",
                "src": "16418:129:164",
                "text": "MUST be thrown by `addOrder` if the order has no associated calculation.\n @param sender `msg.sender` adding the order."
              },
              "errorSelector": "1914441e",
              "name": "OrderNoSources",
              "nameLocation": "16558:14:164",
              "parameters": {
                "id": 75723,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75722,
                    "mutability": "mutable",
                    "name": "sender",
                    "nameLocation": "16581:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75724,
                    "src": "16573:14:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75721,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "16573:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "16572:16:164"
              }
            },
            {
              "id": 75729,
              "nodeType": "ErrorDefinition",
              "src": "16727:38:164",
              "nodes": [],
              "documentation": {
                "id": 75725,
                "nodeType": "StructuredDocumentation",
                "src": "16595:127:164",
                "text": "MUST be thrown by `addOrder` if the order has no associated handle IO.\n @param sender `msg.sender` adding the order."
              },
              "errorSelector": "7e47fcba",
              "name": "OrderNoHandleIO",
              "nameLocation": "16733:15:164",
              "parameters": {
                "id": 75728,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75727,
                    "mutability": "mutable",
                    "name": "sender",
                    "nameLocation": "16757:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75729,
                    "src": "16749:14:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75726,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "16749:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "16748:16:164"
              }
            },
            {
              "id": 75734,
              "nodeType": "ErrorDefinition",
              "src": "16889:36:164",
              "nodes": [],
              "documentation": {
                "id": 75730,
                "nodeType": "StructuredDocumentation",
                "src": "16771:113:164",
                "text": "MUST be thrown by `addOrder` if the order has no inputs.\n @param sender `msg.sender` adding the order."
              },
              "errorSelector": "32586a92",
              "name": "OrderNoInputs",
              "nameLocation": "16895:13:164",
              "parameters": {
                "id": 75733,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75732,
                    "mutability": "mutable",
                    "name": "sender",
                    "nameLocation": "16917:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75734,
                    "src": "16909:14:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75731,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "16909:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "16908:16:164"
              }
            },
            {
              "id": 75739,
              "nodeType": "ErrorDefinition",
              "src": "17050:37:164",
              "nodes": [],
              "documentation": {
                "id": 75735,
                "nodeType": "StructuredDocumentation",
                "src": "16931:114:164",
                "text": "MUST be thrown by `addOrder` if the order has no outputs.\n @param sender `msg.sender` adding the order."
              },
              "errorSelector": "08d7d498",
              "name": "OrderNoOutputs",
              "nameLocation": "17056:14:164",
              "parameters": {
                "id": 75738,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75737,
                    "mutability": "mutable",
                    "name": "sender",
                    "nameLocation": "17079:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75739,
                    "src": "17071:14:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75736,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "17071:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "17070:16:164"
              }
            },
            {
              "id": 75750,
              "nodeType": "EventDefinition",
              "src": "17421:78:164",
              "nodes": [],
              "anonymous": false,
              "documentation": {
                "id": 75740,
                "nodeType": "StructuredDocumentation",
                "src": "17093:323:164",
                "text": "Some tokens have been deposited to a vault.\n @param sender `msg.sender` depositing tokens. Delegated deposits are NOT\n supported.\n @param token The token being deposited.\n @param vaultId The vault ID the tokens are being deposited under.\n @param amount The amount of tokens deposited."
              },
              "eventSelector": "dcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7",
              "name": "Deposit",
              "nameLocation": "17427:7:164",
              "parameters": {
                "id": 75749,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75742,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "sender",
                    "nameLocation": "17443:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75750,
                    "src": "17435:14:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75741,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "17435:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75744,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "token",
                    "nameLocation": "17459:5:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75750,
                    "src": "17451:13:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75743,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "17451:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75746,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "vaultId",
                    "nameLocation": "17474:7:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75750,
                    "src": "17466:15:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 75745,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "17466:7:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75748,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "amount",
                    "nameLocation": "17491:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75750,
                    "src": "17483:14:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 75747,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "17483:7:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "17434:64:164"
              }
            },
            {
              "id": 75763,
              "nodeType": "EventDefinition",
              "src": "18121:101:164",
              "nodes": [],
              "anonymous": false,
              "documentation": {
                "id": 75751,
                "nodeType": "StructuredDocumentation",
                "src": "17505:611:164",
                "text": "Some tokens have been withdrawn from a vault.\n @param sender `msg.sender` withdrawing tokens. Delegated withdrawals are\n NOT supported.\n @param token The token being withdrawn.\n @param vaultId The vault ID the tokens are being withdrawn from.\n @param targetAmount The amount of tokens requested to withdraw.\n @param amount The amount of tokens withdrawn, can be less than the\n target amount if the vault does not have the funds available to cover\n the target amount. For example an active order might move tokens before\n the withdraw completes."
              },
              "eventSelector": "ebff2602b3f468259e1e99f613fed6691f3a6526effe6ef3e768ba7ae7a36c4f",
              "name": "Withdraw",
              "nameLocation": "18127:8:164",
              "parameters": {
                "id": 75762,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75753,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "sender",
                    "nameLocation": "18144:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75763,
                    "src": "18136:14:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75752,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "18136:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75755,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "token",
                    "nameLocation": "18160:5:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75763,
                    "src": "18152:13:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75754,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "18152:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75757,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "vaultId",
                    "nameLocation": "18175:7:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75763,
                    "src": "18167:15:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 75756,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "18167:7:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75759,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "targetAmount",
                    "nameLocation": "18192:12:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75763,
                    "src": "18184:20:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 75758,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "18184:7:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75761,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "amount",
                    "nameLocation": "18214:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75763,
                    "src": "18206:14:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 75760,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "18206:7:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "18135:86:164"
              }
            },
            {
              "id": 75776,
              "nodeType": "EventDefinition",
              "src": "19126:105:164",
              "nodes": [],
              "anonymous": false,
              "documentation": {
                "id": 75764,
                "nodeType": "StructuredDocumentation",
                "src": "18228:893:164",
                "text": "An order has been added to the orderbook. The order is permanently and\n always active according to its expression until/unless it is removed.\n @param sender `msg.sender` adding the order and is owner of the order.\n @param expressionDeployer The expression deployer that ran the integrity\n check for this order. This is NOT included in the `Order` itself but is\n important for offchain processes to ignore untrusted deployers before\n interacting with them.\n @param order The newly added order. MUST be handed back as-is when\n clearing orders and contains derived information in addition to the order\n config that was provided by the order owner.\n @param orderHash The hash of the order as it is recorded onchain. Only\n the hash is stored in Orderbook storage to avoid paying gas to store the\n entire order."
              },
              "eventSelector": "6fa57e1a7a1fbbf3623af2b2025fcd9a5e7e4e31a2a6ec7523445f18e9c50ebf",
              "name": "AddOrder",
              "nameLocation": "19132:8:164",
              "parameters": {
                "id": 75775,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75766,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "sender",
                    "nameLocation": "19149:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75776,
                    "src": "19141:14:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75765,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "19141:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75769,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "expressionDeployer",
                    "nameLocation": "19179:18:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75776,
                    "src": "19157:40:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IExpressionDeployerV2_$55960",
                      "typeString": "contract IExpressionDeployerV2"
                    },
                    "typeName": {
                      "id": 75768,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 75767,
                        "name": "IExpressionDeployerV2",
                        "nameLocations": [
                          "19157:21:164"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 55960,
                        "src": "19157:21:164"
                      },
                      "referencedDeclaration": 55960,
                      "src": "19157:21:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IExpressionDeployerV2_$55960",
                        "typeString": "contract IExpressionDeployerV2"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75772,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "order",
                    "nameLocation": "19205:5:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75776,
                    "src": "19199:11:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Order_$75645_memory_ptr",
                      "typeString": "struct Order"
                    },
                    "typeName": {
                      "id": 75771,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 75770,
                        "name": "Order",
                        "nameLocations": [
                          "19199:5:164"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 75645,
                        "src": "19199:5:164"
                      },
                      "referencedDeclaration": 75645,
                      "src": "19199:5:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Order_$75645_storage_ptr",
                        "typeString": "struct Order"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75774,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "orderHash",
                    "nameLocation": "19220:9:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75776,
                    "src": "19212:17:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    },
                    "typeName": {
                      "id": 75773,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "19212:7:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "19140:90:164"
              }
            },
            {
              "id": 75786,
              "nodeType": "EventDefinition",
              "src": "19550:66:164",
              "nodes": [],
              "anonymous": false,
              "documentation": {
                "id": 75777,
                "nodeType": "StructuredDocumentation",
                "src": "19237:308:164",
                "text": "An order has been removed from the orderbook. This effectively\n deactivates it. Orders can be added again after removal.\n @param sender `msg.sender` removing the order and is owner of the order.\n @param order The removed order.\n @param orderHash The hash of the removed order."
              },
              "eventSelector": "74037e398a4a92c9c1c49ac01c1dabd7f71165fbb4810b72c068f08edd192448",
              "name": "RemoveOrder",
              "nameLocation": "19556:11:164",
              "parameters": {
                "id": 75785,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75779,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "sender",
                    "nameLocation": "19576:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75786,
                    "src": "19568:14:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75778,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "19568:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75782,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "order",
                    "nameLocation": "19590:5:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75786,
                    "src": "19584:11:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Order_$75645_memory_ptr",
                      "typeString": "struct Order"
                    },
                    "typeName": {
                      "id": 75781,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 75780,
                        "name": "Order",
                        "nameLocations": [
                          "19584:5:164"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 75645,
                        "src": "19584:5:164"
                      },
                      "referencedDeclaration": 75645,
                      "src": "19584:5:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Order_$75645_storage_ptr",
                        "typeString": "struct Order"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75784,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "orderHash",
                    "nameLocation": "19605:9:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75786,
                    "src": "19597:17:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    },
                    "typeName": {
                      "id": 75783,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "19597:7:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "19567:48:164"
              }
            },
            {
              "id": 75798,
              "nodeType": "EventDefinition",
              "src": "20260:87:164",
              "nodes": [],
              "anonymous": false,
              "documentation": {
                "id": 75787,
                "nodeType": "StructuredDocumentation",
                "src": "19622:633:164",
                "text": "Some order has been taken by `msg.sender`. This is the same as them\n placing inverse orders then immediately clearing them all, but costs less\n gas and is more convenient and reliable. Analogous to a market buy\n against the specified orders. Each order that is matched within a the\n `takeOrders` loop emits its own individual event.\n @param sender `msg.sender` taking the orders.\n @param config All config defining the orders to attempt to take.\n @param input The input amount from the perspective of sender.\n @param output The output amount from the perspective of sender."
              },
              "eventSelector": "219a030b7ae56e7bea2baab709a4a45dc174a1f85e57730e5cb395bc32962542",
              "name": "TakeOrder",
              "nameLocation": "20266:9:164",
              "parameters": {
                "id": 75797,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75789,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "sender",
                    "nameLocation": "20284:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75798,
                    "src": "20276:14:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75788,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "20276:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75792,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "config",
                    "nameLocation": "20308:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75798,
                    "src": "20292:22:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TakeOrderConfig_$75674_memory_ptr",
                      "typeString": "struct TakeOrderConfig"
                    },
                    "typeName": {
                      "id": 75791,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 75790,
                        "name": "TakeOrderConfig",
                        "nameLocations": [
                          "20292:15:164"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 75674,
                        "src": "20292:15:164"
                      },
                      "referencedDeclaration": 75674,
                      "src": "20292:15:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TakeOrderConfig_$75674_storage_ptr",
                        "typeString": "struct TakeOrderConfig"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75794,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "input",
                    "nameLocation": "20324:5:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75798,
                    "src": "20316:13:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 75793,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "20316:7:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75796,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "output",
                    "nameLocation": "20339:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75798,
                    "src": "20331:14:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 75795,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "20331:7:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "20275:71:164"
              }
            },
            {
              "id": 75807,
              "nodeType": "EventDefinition",
              "src": "20787:70:164",
              "nodes": [],
              "anonymous": false,
              "documentation": {
                "id": 75799,
                "nodeType": "StructuredDocumentation",
                "src": "20353:429:164",
                "text": "Emitted when attempting to match an order that either never existed or\n was removed. An event rather than an error so that we allow attempting\n many orders in a loop and NOT rollback on \"best effort\" basis to clear.\n @param sender `msg.sender` clearing the order that wasn't found.\n @param owner Owner of the order that was not found.\n @param orderHash Hash of the order that was not found."
              },
              "eventSelector": "b70c12fa453793fa6818ec07c91e74363a47aa6a6829dcd9533937fdf30314f3",
              "name": "OrderNotFound",
              "nameLocation": "20793:13:164",
              "parameters": {
                "id": 75806,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75801,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "sender",
                    "nameLocation": "20815:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75807,
                    "src": "20807:14:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75800,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "20807:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75803,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "owner",
                    "nameLocation": "20831:5:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75807,
                    "src": "20823:13:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75802,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "20823:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75805,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "orderHash",
                    "nameLocation": "20846:9:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75807,
                    "src": "20838:17:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    },
                    "typeName": {
                      "id": 75804,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "20838:7:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "20806:50:164"
              }
            },
            {
              "id": 75816,
              "nodeType": "EventDefinition",
              "src": "21287:72:164",
              "nodes": [],
              "anonymous": false,
              "documentation": {
                "id": 75808,
                "nodeType": "StructuredDocumentation",
                "src": "20863:419:164",
                "text": "Emitted when an order evaluates to a zero amount. An event rather than an\n error so that we allow attempting many orders in a loop and NOT rollback\n on a \"best effort\" basis to clear.\n @param sender `msg.sender` clearing the order that had a 0 amount.\n @param owner Owner of the order that evaluated to a 0 amount.\n @param orderHash Hash of the order that evaluated to a 0 amount."
              },
              "eventSelector": "500b713857325f9e6dcb52ae832eca9109d107ed1aae9cb4928b4c1e13f051aa",
              "name": "OrderZeroAmount",
              "nameLocation": "21293:15:164",
              "parameters": {
                "id": 75815,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75810,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "sender",
                    "nameLocation": "21317:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75816,
                    "src": "21309:14:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75809,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "21309:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75812,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "owner",
                    "nameLocation": "21333:5:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75816,
                    "src": "21325:13:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75811,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "21325:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75814,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "orderHash",
                    "nameLocation": "21348:9:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75816,
                    "src": "21340:17:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    },
                    "typeName": {
                      "id": 75813,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "21340:7:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "21308:50:164"
              }
            },
            {
              "id": 75825,
              "nodeType": "EventDefinition",
              "src": "21823:77:164",
              "nodes": [],
              "anonymous": false,
              "documentation": {
                "id": 75817,
                "nodeType": "StructuredDocumentation",
                "src": "21365:453:164",
                "text": "Emitted when an order evaluates to a ratio exceeding the counterparty's\n maximum limit. An error rather than an error so that we allow attempting\n many orders in a loop and NOT rollback on a \"best effort\" basis to clear.\n @param sender `msg.sender` clearing the order that had an excess ratio.\n @param owner Owner of the order that had an excess ratio.\n @param orderHash Hash of the order that had an excess ratio."
              },
              "eventSelector": "e3151dc8cb7a54ffc4baabd28c1f241c94d510b5e5b502491ac3cad6c16316d5",
              "name": "OrderExceedsMaxRatio",
              "nameLocation": "21829:20:164",
              "parameters": {
                "id": 75824,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75819,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "sender",
                    "nameLocation": "21858:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75825,
                    "src": "21850:14:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75818,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "21850:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75821,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "owner",
                    "nameLocation": "21874:5:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75825,
                    "src": "21866:13:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75820,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "21866:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75823,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "orderHash",
                    "nameLocation": "21889:9:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75825,
                    "src": "21881:17:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    },
                    "typeName": {
                      "id": 75822,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "21881:7:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "21849:50:164"
              }
            },
            {
              "id": 75839,
              "nodeType": "EventDefinition",
              "src": "22245:77:164",
              "nodes": [],
              "anonymous": false,
              "documentation": {
                "id": 75826,
                "nodeType": "StructuredDocumentation",
                "src": "21906:334:164",
                "text": "Emitted before two orders clear. Covers both orders and includes all the\n state before anything is calculated.\n @param sender `msg.sender` clearing both orders.\n @param alice One of the orders.\n @param bob The other order.\n @param clearConfig Additional config required to process the clearance."
              },
              "eventSelector": "d153812deb929a6e4378f6f8cf61d010470840bf2e736f43fb2275803958bfa2",
              "name": "Clear",
              "nameLocation": "22251:5:164",
              "parameters": {
                "id": 75838,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75828,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "sender",
                    "nameLocation": "22265:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75839,
                    "src": "22257:14:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75827,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "22257:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75831,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "alice",
                    "nameLocation": "22279:5:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75839,
                    "src": "22273:11:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Order_$75645_memory_ptr",
                      "typeString": "struct Order"
                    },
                    "typeName": {
                      "id": 75830,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 75829,
                        "name": "Order",
                        "nameLocations": [
                          "22273:5:164"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 75645,
                        "src": "22273:5:164"
                      },
                      "referencedDeclaration": 75645,
                      "src": "22273:5:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Order_$75645_storage_ptr",
                        "typeString": "struct Order"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75834,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "bob",
                    "nameLocation": "22292:3:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75839,
                    "src": "22286:9:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Order_$75645_memory_ptr",
                      "typeString": "struct Order"
                    },
                    "typeName": {
                      "id": 75833,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 75832,
                        "name": "Order",
                        "nameLocations": [
                          "22286:5:164"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 75645,
                        "src": "22286:5:164"
                      },
                      "referencedDeclaration": 75645,
                      "src": "22286:5:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Order_$75645_storage_ptr",
                        "typeString": "struct Order"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75837,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "clearConfig",
                    "nameLocation": "22309:11:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75839,
                    "src": "22297:23:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ClearConfig_$75687_memory_ptr",
                      "typeString": "struct ClearConfig"
                    },
                    "typeName": {
                      "id": 75836,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 75835,
                        "name": "ClearConfig",
                        "nameLocations": [
                          "22297:11:164"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 75687,
                        "src": "22297:11:164"
                      },
                      "referencedDeclaration": 75687,
                      "src": "22297:11:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ClearConfig_$75687_storage_ptr",
                        "typeString": "struct ClearConfig"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "22256:65:164"
              }
            },
            {
              "id": 75847,
              "nodeType": "EventDefinition",
              "src": "22601:68:164",
              "nodes": [],
              "anonymous": false,
              "documentation": {
                "id": 75840,
                "nodeType": "StructuredDocumentation",
                "src": "22328:268:164",
                "text": "Emitted after two orders clear. Includes all final state changes in the\n vault balances, including the clearer's vaults.\n @param sender `msg.sender` clearing the order.\n @param clearStateChange The final vault state changes from the clearance."
              },
              "eventSelector": "3f20e55919cca701abb2a40ab72542b25ea7eed63a50f979dd2cd3231e5f488d",
              "name": "AfterClear",
              "nameLocation": "22607:10:164",
              "parameters": {
                "id": 75846,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75842,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "sender",
                    "nameLocation": "22626:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75847,
                    "src": "22618:14:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75841,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "22618:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75845,
                    "indexed": false,
                    "mutability": "mutable",
                    "name": "clearStateChange",
                    "nameLocation": "22651:16:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75847,
                    "src": "22634:33:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ClearStateChange_$75696_memory_ptr",
                      "typeString": "struct ClearStateChange"
                    },
                    "typeName": {
                      "id": 75844,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 75843,
                        "name": "ClearStateChange",
                        "nameLocations": [
                          "22634:16:164"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 75696,
                        "src": "22634:16:164"
                      },
                      "referencedDeclaration": 75696,
                      "src": "22634:16:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ClearStateChange_$75696_storage_ptr",
                        "typeString": "struct ClearStateChange"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "22617:51:164"
              }
            },
            {
              "id": 75859,
              "nodeType": "FunctionDefinition",
              "src": "22949:104:164",
              "nodes": [],
              "documentation": {
                "id": 75848,
                "nodeType": "StructuredDocumentation",
                "src": "22675:269:164",
                "text": "Get the current balance of a vault for a given owner, token and vault ID.\n @param owner The owner of the vault.\n @param token The token the vault is for.\n @param id The vault ID to read.\n @return balance The current balance of the vault."
              },
              "functionSelector": "d97b2e48",
              "implemented": false,
              "kind": "function",
              "modifiers": [],
              "name": "vaultBalance",
              "nameLocation": "22958:12:164",
              "parameters": {
                "id": 75855,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75850,
                    "mutability": "mutable",
                    "name": "owner",
                    "nameLocation": "22979:5:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75859,
                    "src": "22971:13:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75849,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "22971:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75852,
                    "mutability": "mutable",
                    "name": "token",
                    "nameLocation": "22994:5:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75859,
                    "src": "22986:13:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75851,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "22986:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75854,
                    "mutability": "mutable",
                    "name": "id",
                    "nameLocation": "23009:2:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75859,
                    "src": "23001:10:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 75853,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "23001:7:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "22970:42:164"
              },
              "returnParameters": {
                "id": 75858,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75857,
                    "mutability": "mutable",
                    "name": "balance",
                    "nameLocation": "23044:7:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75859,
                    "src": "23036:15:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 75856,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "23036:7:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "23035:17:164"
              },
              "scope": 75938,
              "stateMutability": "view",
              "virtual": false,
              "visibility": "external"
            },
            {
              "id": 75869,
              "nodeType": "FunctionDefinition",
              "src": "24663:74:164",
              "nodes": [],
              "documentation": {
                "id": 75860,
                "nodeType": "StructuredDocumentation",
                "src": "24036:622:164",
                "text": "Vault IDs are namespaced by the token address so there is no risk of\n collision between tokens. For example, vault ID 0 for token A is\n completely different to vault ID 0 for token B.\n `0` amount deposits are unsupported as underlying token contracts\n handle `0` value transfers differently and this would be a source of\n confusion. The order book MUST revert with `ZeroDepositAmount` if the\n amount is zero.\n @param token The token to deposit.\n @param vaultId The vault ID to deposit under.\n @param amount The amount of tokens to deposit."
              },
              "functionSelector": "0efe6a8b",
              "implemented": false,
              "kind": "function",
              "modifiers": [],
              "name": "deposit",
              "nameLocation": "24672:7:164",
              "parameters": {
                "id": 75867,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75862,
                    "mutability": "mutable",
                    "name": "token",
                    "nameLocation": "24688:5:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75869,
                    "src": "24680:13:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75861,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "24680:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75864,
                    "mutability": "mutable",
                    "name": "vaultId",
                    "nameLocation": "24703:7:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75869,
                    "src": "24695:15:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 75863,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "24695:7:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75866,
                    "mutability": "mutable",
                    "name": "amount",
                    "nameLocation": "24720:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75869,
                    "src": "24712:14:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 75865,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "24712:7:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "24679:48:164"
              },
              "returnParameters": {
                "id": 75868,
                "nodeType": "ParameterList",
                "parameters": [],
                "src": "24736:0:164"
              },
              "scope": 75938,
              "stateMutability": "nonpayable",
              "virtual": false,
              "visibility": "external"
            },
            {
              "id": 75879,
              "nodeType": "FunctionDefinition",
              "src": "25713:81:164",
              "nodes": [],
              "documentation": {
                "id": 75870,
                "nodeType": "StructuredDocumentation",
                "src": "24743:965:164",
                "text": "Allows the sender to withdraw any tokens from their own vaults. If the\n withrawer has an active flash loan debt denominated in the same token\n being withdrawn then Orderbook will merely reduce the debt and NOT send\n the amount of tokens repaid to the flashloan debt.\n MUST revert if the amount _requested_ to withdraw is zero. The withdrawal\n MAY still not move any tokens (without revert) if the vault balance is\n zero, or the withdrawal is used to repay a flash loan, or due to any\n other internal accounting.\n @param token The token to withdraw.\n @param vaultId The vault ID to withdraw from.\n @param targetAmount The amount of tokens to attempt to withdraw. MAY\n result in fewer tokens withdrawn if the vault balance is lower than the\n target amount. MAY NOT be zero, the order book MUST revert with\n `ZeroWithdrawTargetAmount` if the amount is zero."
              },
              "functionSelector": "b5c5f672",
              "implemented": false,
              "kind": "function",
              "modifiers": [],
              "name": "withdraw",
              "nameLocation": "25722:8:164",
              "parameters": {
                "id": 75877,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75872,
                    "mutability": "mutable",
                    "name": "token",
                    "nameLocation": "25739:5:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75879,
                    "src": "25731:13:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 75871,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "25731:7:164",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75874,
                    "mutability": "mutable",
                    "name": "vaultId",
                    "nameLocation": "25754:7:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75879,
                    "src": "25746:15:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 75873,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "25746:7:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75876,
                    "mutability": "mutable",
                    "name": "targetAmount",
                    "nameLocation": "25771:12:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75879,
                    "src": "25763:20:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 75875,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "25763:7:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "25730:54:164"
              },
              "returnParameters": {
                "id": 75878,
                "nodeType": "ParameterList",
                "parameters": [],
                "src": "25793:0:164"
              },
              "scope": 75938,
              "stateMutability": "nonpayable",
              "virtual": false,
              "visibility": "external"
            },
            {
              "id": 75888,
              "nodeType": "FunctionDefinition",
              "src": "27154:86:164",
              "nodes": [],
              "documentation": {
                "id": 75880,
                "nodeType": "StructuredDocumentation",
                "src": "25800:1349:164",
                "text": "Given an order config, deploys the expression and builds the full `Order`\n for the config, then records it as an active order. Delegated adding an\n order is NOT supported. The `msg.sender` that adds an order is ALWAYS\n the owner and all resulting vault movements are their own.\n MUST revert with `OrderNoSources` if the order has no associated\n calculation and `OrderNoHandleIO` if the order has no handle IO\n entrypoint. The calculation MUST return at least two values from\n evaluation, the maximum amount and the IO ratio. The handle IO entrypoint\n SHOULD return zero values from evaluation. Either MAY revert during\n evaluation on the interpreter, which MUST prevent the order from\n clearing.\n MUST revert with `OrderNoInputs` if the order has no inputs.\n MUST revert with `OrderNoOutputs` if the order has no outputs.\n If the order already exists, the order book MUST NOT change state, which\n includes not emitting an event. Instead it MUST return false. If the\n order book modifies state it MUST emit an `AddOrder` event and return\n true.\n @param config All config required to build an `Order`.\n @return stateChanged True if the order was added, false if it already\n existed."
              },
              "functionSelector": "847a1bc9",
              "implemented": false,
              "kind": "function",
              "modifiers": [],
              "name": "addOrder",
              "nameLocation": "27163:8:164",
              "parameters": {
                "id": 75884,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75883,
                    "mutability": "mutable",
                    "name": "config",
                    "nameLocation": "27195:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75888,
                    "src": "27172:29:164",
                    "stateVariable": false,
                    "storageLocation": "calldata",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_OrderConfigV2_$75629_calldata_ptr",
                      "typeString": "struct OrderConfigV2"
                    },
                    "typeName": {
                      "id": 75882,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 75881,
                        "name": "OrderConfigV2",
                        "nameLocations": [
                          "27172:13:164"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 75629,
                        "src": "27172:13:164"
                      },
                      "referencedDeclaration": 75629,
                      "src": "27172:13:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_OrderConfigV2_$75629_storage_ptr",
                        "typeString": "struct OrderConfigV2"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "27171:31:164"
              },
              "returnParameters": {
                "id": 75887,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75886,
                    "mutability": "mutable",
                    "name": "stateChanged",
                    "nameLocation": "27226:12:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75888,
                    "src": "27221:17:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "typeName": {
                      "id": 75885,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "27221:4:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "27220:19:164"
              },
              "scope": 75938,
              "stateMutability": "nonpayable",
              "virtual": false,
              "visibility": "external"
            },
            {
              "id": 75896,
              "nodeType": "FunctionDefinition",
              "src": "27428:76:164",
              "nodes": [],
              "documentation": {
                "id": 75889,
                "nodeType": "StructuredDocumentation",
                "src": "27246:177:164",
                "text": "Returns true if the order exists, false otherwise.\n @param orderHash The hash of the order to check.\n @return exists True if the order exists, false otherwise."
              },
              "functionSelector": "2cb77e9f",
              "implemented": false,
              "kind": "function",
              "modifiers": [],
              "name": "orderExists",
              "nameLocation": "27437:11:164",
              "parameters": {
                "id": 75892,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75891,
                    "mutability": "mutable",
                    "name": "orderHash",
                    "nameLocation": "27457:9:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75896,
                    "src": "27449:17:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    },
                    "typeName": {
                      "id": 75890,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "27449:7:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "27448:19:164"
              },
              "returnParameters": {
                "id": 75895,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75894,
                    "mutability": "mutable",
                    "name": "exists",
                    "nameLocation": "27496:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75896,
                    "src": "27491:11:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "typeName": {
                      "id": 75893,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "27491:4:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "27490:13:164"
              },
              "scope": 75938,
              "stateMutability": "view",
              "virtual": false,
              "visibility": "external"
            },
            {
              "id": 75905,
              "nodeType": "FunctionDefinition",
              "src": "28006:80:164",
              "nodes": [],
              "documentation": {
                "id": 75897,
                "nodeType": "StructuredDocumentation",
                "src": "27510:491:164",
                "text": "Order owner can remove their own orders. Delegated order removal is NOT\n supported and will revert. Removing an order multiple times or removing\n an order that never existed are valid, the event will be emitted and the\n transaction will complete with that order hash definitely, redundantly\n not live.\n @param order The `Order` data exactly as it was added.\n @return stateChanged True if the order was removed, false if it did not\n exist."
              },
              "functionSelector": "e23746a3",
              "implemented": false,
              "kind": "function",
              "modifiers": [],
              "name": "removeOrder",
              "nameLocation": "28015:11:164",
              "parameters": {
                "id": 75901,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75900,
                    "mutability": "mutable",
                    "name": "order",
                    "nameLocation": "28042:5:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75905,
                    "src": "28027:20:164",
                    "stateVariable": false,
                    "storageLocation": "calldata",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Order_$75645_calldata_ptr",
                      "typeString": "struct Order"
                    },
                    "typeName": {
                      "id": 75899,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 75898,
                        "name": "Order",
                        "nameLocations": [
                          "28027:5:164"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 75645,
                        "src": "28027:5:164"
                      },
                      "referencedDeclaration": 75645,
                      "src": "28027:5:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Order_$75645_storage_ptr",
                        "typeString": "struct Order"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "28026:22:164"
              },
              "returnParameters": {
                "id": 75904,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75903,
                    "mutability": "mutable",
                    "name": "stateChanged",
                    "nameLocation": "28072:12:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75905,
                    "src": "28067:17:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "typeName": {
                      "id": 75902,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "28067:4:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "28066:19:164"
              },
              "scope": 75938,
              "stateMutability": "nonpayable",
              "virtual": false,
              "visibility": "external"
            },
            {
              "id": 75916,
              "nodeType": "FunctionDefinition",
              "src": "30693:131:164",
              "nodes": [],
              "documentation": {
                "id": 75906,
                "nodeType": "StructuredDocumentation",
                "src": "28092:2596:164",
                "text": "Allows `msg.sender` to attempt to fill a list of orders in sequence\n without needing to place their own order and clear them. This works like\n a market buy but against a specific set of orders. Every order will\n looped over and calculated individually then filled maximally until the\n request input is reached for the `msg.sender`. The `msg.sender` is\n responsible for selecting the best orders at the time according to their\n criteria and MAY specify a maximum IO ratio to guard against an order\n spiking the ratio beyond what the `msg.sender` expected and is\n comfortable with. As orders may be removed and calculate their ratios\n dynamically, all issues fulfilling an order other than misconfiguration\n by the `msg.sender` are no-ops and DO NOT revert the transaction. This\n allows the `msg.sender` to optimistically provide a list of orders that\n they aren't sure will completely fill at a good price, and fallback to\n more reliable orders further down their list. Misconfiguration such as\n token mismatches are errors that revert as this is known and static at\n all times to the `msg.sender` so MUST be provided correctly. `msg.sender`\n MAY specify a minimum input that MUST be reached across all orders in the\n list, otherwise the transaction will revert, this MAY be set to zero.\n Exactly like withdraw, if there is an active flash loan for `msg.sender`\n they will have their outstanding loan reduced by the final input amount\n preferentially before sending any tokens. Notably this allows arb bots\n implemented as flash loan borrowers to connect orders against external\n liquidity directly by paying back the loan with a `takeOrders` call and\n outputting the result of the external trade.\n Rounding errors always favour the order never the `msg.sender`.\n @param config The constraints and list of orders to take, orders are\n processed sequentially in order as provided, there is NO ATTEMPT onchain\n to predict/filter/sort these orders other than evaluating them as\n provided. Inputs and outputs are from the perspective of `msg.sender`\n except for values specified by the orders themselves which are the from\n the perspective of that order.\n @return totalInput Total tokens sent to `msg.sender`, taken from order\n vaults processed.\n @return totalOutput Total tokens taken from `msg.sender` and distributed\n between vaults."
              },
              "functionSelector": "a715c667",
              "implemented": false,
              "kind": "function",
              "modifiers": [],
              "name": "takeOrders",
              "nameLocation": "30702:10:164",
              "parameters": {
                "id": 75910,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75909,
                    "mutability": "mutable",
                    "name": "config",
                    "nameLocation": "30741:6:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75916,
                    "src": "30713:34:164",
                    "stateVariable": false,
                    "storageLocation": "calldata",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TakeOrdersConfigV2_$75662_calldata_ptr",
                      "typeString": "struct TakeOrdersConfigV2"
                    },
                    "typeName": {
                      "id": 75908,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 75907,
                        "name": "TakeOrdersConfigV2",
                        "nameLocations": [
                          "30713:18:164"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 75662,
                        "src": "30713:18:164"
                      },
                      "referencedDeclaration": 75662,
                      "src": "30713:18:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TakeOrdersConfigV2_$75662_storage_ptr",
                        "typeString": "struct TakeOrdersConfigV2"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "30712:36:164"
              },
              "returnParameters": {
                "id": 75915,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75912,
                    "mutability": "mutable",
                    "name": "totalInput",
                    "nameLocation": "30791:10:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75916,
                    "src": "30783:18:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 75911,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "30783:7:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75914,
                    "mutability": "mutable",
                    "name": "totalOutput",
                    "nameLocation": "30811:11:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75916,
                    "src": "30803:19:164",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 75913,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "30803:7:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "30782:41:164"
              },
              "scope": 75938,
              "stateMutability": "nonpayable",
              "virtual": false,
              "visibility": "external"
            },
            {
              "id": 75937,
              "nodeType": "FunctionDefinition",
              "src": "34013:230:164",
              "nodes": [],
              "documentation": {
                "id": 75917,
                "nodeType": "StructuredDocumentation",
                "src": "30830:3178:164",
                "text": "Allows `msg.sender` to match two live orders placed earlier by\n non-interactive parties and claim a bounty in the process. The clearer is\n free to select any two live orders on the order book for matching and as\n long as they have compatible tokens, ratios and amounts, the orders will\n clear. Clearing the orders DOES NOT remove them from the orderbook, they\n remain live until explicitly removed by their owner. Even if the input\n vault balances are completely emptied, the orders remain live until\n removed. This allows order owners to deploy a strategy over a long period\n of time and periodically top up the input vaults. Clearing two orders\n from the same owner is disallowed.\n Any mismatch in the ratios between the two orders will cause either more\n inputs than there are available outputs (transaction will revert) or less\n inputs than there are available outputs. In the latter case the excess\n outputs are given to the `msg.sender` of clear, to the vaults they\n specify in the clear config. This not only incentivises \"automatic\" clear\n calls for both alice and bob, but incentivises _prioritising greater\n ratio differences_ with a larger bounty. The second point is important\n because it implicitly prioritises orders that are further from the\n current market price, thus putting constant increasing pressure on the\n entire system the further it drifts from the norm, no matter how esoteric\n the individual order expressions and sizings might be.\n All else equal there are several factors that would impact how reliably\n some order clears relative to the wider market, such as:\n - Bounties are effectively percentages of cleared amounts so larger\n   orders have larger bounties and cover gas costs more easily\n - High gas on the network means that orders are harder to clear\n   profitably so the negative spread of the ratios will need to be larger\n - Complex and stateful expressions cost more gas to evalulate so the\n   negative spread will need to be larger\n - Erratic behavior of the order owner could reduce the willingness of\n   third parties to interact if it could result in wasted gas due to\n   orders suddently being removed before clearance etc.\n - Dynamic and highly volatile words used in the expression could be\n   ignored or low priority by clearers who want to be sure that they can\n   accurately predict the ratios that they include in their clearance\n - Geopolitical issues such as sanctions and regulatory restrictions could\n   cause issues for certain owners and clearers\n @param alice Some order to clear.\n @param bob Another order to clear.\n @param clearConfig Additional configuration for the clearance such as\n how to handle the bounty payment for the `msg.sender`.\n @param aliceSignedContext Optional signed context that is relevant to A.\n @param bobSignedContext Optional signed context that is relevant to B."
              },
              "functionSelector": "9e18968b",
              "implemented": false,
              "kind": "function",
              "modifiers": [],
              "name": "clear",
              "nameLocation": "34022:5:164",
              "parameters": {
                "id": 75935,
                "nodeType": "ParameterList",
                "parameters": [
                  {
                    "constant": false,
                    "id": 75920,
                    "mutability": "mutable",
                    "name": "alice",
                    "nameLocation": "34050:5:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75937,
                    "src": "34037:18:164",
                    "stateVariable": false,
                    "storageLocation": "memory",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Order_$75645_memory_ptr",
                      "typeString": "struct Order"
                    },
                    "typeName": {
                      "id": 75919,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 75918,
                        "name": "Order",
                        "nameLocations": [
                          "34037:5:164"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 75645,
                        "src": "34037:5:164"
                      },
                      "referencedDeclaration": 75645,
                      "src": "34037:5:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Order_$75645_storage_ptr",
                        "typeString": "struct Order"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75923,
                    "mutability": "mutable",
                    "name": "bob",
                    "nameLocation": "34078:3:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75937,
                    "src": "34065:16:164",
                    "stateVariable": false,
                    "storageLocation": "memory",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Order_$75645_memory_ptr",
                      "typeString": "struct Order"
                    },
                    "typeName": {
                      "id": 75922,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 75921,
                        "name": "Order",
                        "nameLocations": [
                          "34065:5:164"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 75645,
                        "src": "34065:5:164"
                      },
                      "referencedDeclaration": 75645,
                      "src": "34065:5:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Order_$75645_storage_ptr",
                        "typeString": "struct Order"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75926,
                    "mutability": "mutable",
                    "name": "clearConfig",
                    "nameLocation": "34112:11:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75937,
                    "src": "34091:32:164",
                    "stateVariable": false,
                    "storageLocation": "calldata",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ClearConfig_$75687_calldata_ptr",
                      "typeString": "struct ClearConfig"
                    },
                    "typeName": {
                      "id": 75925,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 75924,
                        "name": "ClearConfig",
                        "nameLocations": [
                          "34091:11:164"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 75687,
                        "src": "34091:11:164"
                      },
                      "referencedDeclaration": 75687,
                      "src": "34091:11:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ClearConfig_$75687_storage_ptr",
                        "typeString": "struct ClearConfig"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75930,
                    "mutability": "mutable",
                    "name": "aliceSignedContext",
                    "nameLocation": "34158:18:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75937,
                    "src": "34133:43:164",
                    "stateVariable": false,
                    "storageLocation": "memory",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_SignedContextV1_$55732_memory_ptr_$dyn_memory_ptr",
                      "typeString": "struct SignedContextV1[]"
                    },
                    "typeName": {
                      "baseType": {
                        "id": 75928,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 75927,
                          "name": "SignedContextV1",
                          "nameLocations": [
                            "34133:15:164"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 55732,
                          "src": "34133:15:164"
                        },
                        "referencedDeclaration": 55732,
                        "src": "34133:15:164",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_SignedContextV1_$55732_storage_ptr",
                          "typeString": "struct SignedContextV1"
                        }
                      },
                      "id": 75929,
                      "nodeType": "ArrayTypeName",
                      "src": "34133:17:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_SignedContextV1_$55732_storage_$dyn_storage_ptr",
                        "typeString": "struct SignedContextV1[]"
                      }
                    },
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 75934,
                    "mutability": "mutable",
                    "name": "bobSignedContext",
                    "nameLocation": "34211:16:164",
                    "nodeType": "VariableDeclaration",
                    "scope": 75937,
                    "src": "34186:41:164",
                    "stateVariable": false,
                    "storageLocation": "memory",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_SignedContextV1_$55732_memory_ptr_$dyn_memory_ptr",
                      "typeString": "struct SignedContextV1[]"
                    },
                    "typeName": {
                      "baseType": {
                        "id": 75932,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 75931,
                          "name": "SignedContextV1",
                          "nameLocations": [
                            "34186:15:164"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 55732,
                          "src": "34186:15:164"
                        },
                        "referencedDeclaration": 55732,
                        "src": "34186:15:164",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_SignedContextV1_$55732_storage_ptr",
                          "typeString": "struct SignedContextV1"
                        }
                      },
                      "id": 75933,
                      "nodeType": "ArrayTypeName",
                      "src": "34186:17:164",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_SignedContextV1_$55732_storage_$dyn_storage_ptr",
                        "typeString": "struct SignedContextV1[]"
                      }
                    },
                    "visibility": "internal"
                  }
                ],
                "src": "34027:206:164"
              },
              "returnParameters": {
                "id": 75936,
                "nodeType": "ParameterList",
                "parameters": [],
                "src": "34242:0:164"
              },
              "scope": 75938,
              "stateMutability": "nonpayable",
              "virtual": false,
              "visibility": "external"
            }
          ],
          "abstract": false,
          "baseContracts": [
            {
              "baseName": {
                "id": 75698,
                "name": "IERC3156FlashLender",
                "nameLocations": [
                  "15572:19:164"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 75603,
                "src": "15572:19:164"
              },
              "id": 75699,
              "nodeType": "InheritanceSpecifier",
              "src": "15572:19:164"
            },
            {
              "baseName": {
                "id": 75700,
                "name": "IInterpreterCallerV2",
                "nameLocations": [
                  "15593:20:164"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 55752,
                "src": "15593:20:164"
              },
              "id": 75701,
              "nodeType": "InheritanceSpecifier",
              "src": "15593:20:164"
            }
          ],
          "canonicalName": "IOrderBookV3",
          "contractDependencies": [],
          "contractKind": "interface",
          "documentation": {
            "id": 75697,
            "nodeType": "StructuredDocumentation",
            "src": "6845:8701:164",
            "text": "@title IOrderBookV3\n @notice An orderbook that deploys _strategies_ represented as interpreter\n expressions rather than individual orders. The order book contract itself\n behaves similarly to an `ERC4626` vault but with much more fine grained\n control over how tokens are allocated and moved internally by their owners,\n and without any concept of \"shares\". Token owners MAY deposit and withdraw\n their tokens under arbitrary vault IDs on a per-token basis, then define\n orders that specify how tokens move between vaults according to an expression.\n The expression returns a maximum amount and a token input/output ratio from\n the perpective of the order. When two expressions intersect, as in their\n ratios are the inverse of each other, then tokens can move between vaults.\n For example, consider order A with input TKNA and output TKNB with a constant\n ratio of 100:1. This order in isolation has no ability to move tokens. If\n an order B appears with input TKNB and output TKNA and a ratio of 1:100 then\n this is a perfect match with order A. In this case 100 TKNA will move from\n order B to order A and 1 TKNB will move from order A to order B.\n IO ratios are always specified as input:output and are 18 decimal fixed point\n values. The maximum amount that can be moved in the current clearance is also\n set by the order expression as an 18 decimal fixed point value.\n Typically orders will not clear when their match is exactly 1:1 as the\n clearer needs to pay gas to process the match. Each order will get exactly\n the ratio it calculates when it does clear so if there is _overlap_ in the\n ratios then the clearer keeps the difference. In our above example, consider\n order B asking a ratio of 1:110 instead of 1:100. In this case 100 TKNA will\n move from order B to order A and 10 TKNA will move to the clearer's vault and\n 1 TKNB will move from order A to order B. In the case of fixed prices this is\n not very interesting as order B could more simply take order A directly for\n cheaper rather than involving a third party. Indeed, Orderbook supports a\n direct \"take orders\" method that works similar to a \"market buy\". In the case\n of dynamic expression based ratios, it allows both order A and order B to\n clear non-interactively according to their strategy, trading off active\n management, dealing with front-running, MEV, etc. for zero-gas and\n exact-ratio clearance.\n The general invariant for clearing and take orders is:\n ```\n ratioA = InputA / OutputA\n ratioB = InputB / OutputB\n ratioA * ratioB = ( InputA * InputB ) / ( OutputA * OutputB )\n OutputA >= InputB\n OutputB >= InputA\n ∴ ratioA * ratioB <= 1\n ```\n Orderbook is `IERC3156FlashLender` compliant with a 0 fee flash loan\n implementation to allow external liquidity from other onchain DEXes to match\n against orderbook expressions. All deposited tokens across all vaults are\n available for flashloan, the flashloan MAY BE REPAID BY CALLING TAKE ORDER\n such that Orderbook's liability to its vaults is decreased by an incoming\n trade from the flashloan borrower. See `ZeroExOrderBookFlashBorrower` for\n an example of how this works in practise.\n Orderbook supports many to many input/output token relationship, for example\n some order can specify an array of stables it would be willing to accept in\n return for some ETH. This removes the need for a combinatorial explosion of\n order strategies between like assets but introduces the issue of token\n decimal handling. End users understand that \"one\" USDT is roughly equal to\n \"one\" DAI, but onchain this is incorrect by _12 orders of magnitude_. This\n is because \"one\" DAI is `1e18` tokens and \"one\" USDT is `1e6` tokens. The\n orderbook is allowing orders to deploy expressions that define _economic\n equivalence_ but this doesn't map 1:1 with numeric equivalence in a many to\n many setup behind token decimal convensions. The solution is to require that\n end users who place orders provide the decimals of each token they include\n in their valid IO lists, and to calculate all amounts and ratios in their\n expressions _as though they were 18 decimal fixed point values_. Orderbook\n will then automatically rescale the expression values before applying the\n final vault movements. If an order provides the \"wrong\" decimal values for\n some token then it will simply calculate its own ratios and amounts\n incorrectly which will either lead to no matching orders or a very bad trade\n for the order owner. There is no way that misrepresenting decimals can attack\n some other order by a counterparty. Orderbook DOES NOT read decimals from\n tokens onchain because A. this would be gas for an external call to a cold\n token contract and B. the ERC20 standard specifically states NOT to read\n decimals from the interface onchain.\n Token amounts and ratios returned by calculate order MUST be 18 decimal fixed\n point values. Token amounts input to handle IO MUST be the exact absolute\n values that move between the vaults, i.e. NOT rescaled to 18 decimals. The\n author of the handle IO expression MUST use the token decimals and amounts to\n rescale themselves if they want that logic, notably the expression author\n will need to specify the desired rounding behaviour in the rescaling process.\n When two orders clear there are NO TOKEN MOVEMENTS, only internal vault\n balances are updated from the input and output vaults. Typically this results\n in less gas per clear than calling external token transfers and also avoids\n issues with reentrancy, allowances, external balances etc. This also means\n that REBASING TOKENS AND TOKENS WITH DYNAMIC BALANCE ARE NOT SUPPORTED.\n Orderbook ONLY WORKS IF TOKEN BALANCES ARE 1:1 WITH ADDITION/SUBTRACTION PER\n VAULT MOVEMENT.\n Dust due to rounding errors always favours the order. Output max is rounded\n down and IO ratios are rounded up. Input and output amounts are always\n converted to absolute values before applying to vault balances such that\n orderbook always retains fully collateralised inventory of underlying token\n balances to support withdrawals, with the caveat that dynamic token balanes\n are not supported.\n When an order clears it is NOT removed. Orders remain active until the owner\n deactivates them. This is gas efficient as order owners MAY deposit more\n tokens in a vault with an order against it many times and the order strategy\n will continue to be clearable according to its expression. As vault IDs are\n `uint256` values there are effectively infinite possible vaults for any token\n so there is no limit to how many active orders any address can have at one\n time. This also allows orders to be daisy chained arbitrarily where output\n vaults for some order are the input vaults for some other order.\n Expression storage is namespaced by order owner, so gets and sets are unique\n to each onchain address. Order owners MUST TAKE CARE not to override their\n storage sets globally across all their orders, which they can do most simply\n by hashing the order hash into their get/set keys inside the expression. This\n gives maximum flexibility for shared state across orders without allowing\n order owners to attack and overwrite values stored by orders placed by their\n counterparty.\n Note that each order specifies its own interpreter and deployer so the\n owner is responsible for not corrupting their own calculations with bad\n interpreters. This also means the Orderbook MUST assume the interpreter, and\n notably the interpreter's store, is malicious and guard against reentrancy\n etc.\n As Orderbook supports any expression that can run on any `IInterpreterV1` and\n counterparties are available to the order, order strategies are free to\n implement KYC/membership, tracking, distributions, stock, buybacks, etc. etc.\n Main differences between `IOrderBookV2` and `IOderBookV3`:\n - Most structs are now primitives to save gas.\n - Order hash is `bytes32`.\n - `deposit` and `withdraw` MUST revert if the amount is zero.\n - adding an order MUST revert if there is no calculation entrypoint.\n - adding an order MUST revert if there is no handle IO entrypoint.\n - adding an order MUST revert if there are no inputs.\n - adding an order MUST revert if there are no outputs.\n - adding and removing orders MUST return a boolean indicating if the state\n changed.\n - new `orderExists` method."
          },
          "fullyImplemented": false,
          "linearizedBaseContracts": [
            75938,
            55752,
            75603
          ],
          "name": "IOrderBookV3",
          "nameLocation": "15556:12:164",
          "scope": 75939,
          "usedErrors": [
            75710,
            75719,
            75724,
            75729,
            75734,
            75739
          ]
        }
      ],
      "license": "CAL"
    },
    "id": 164
  }