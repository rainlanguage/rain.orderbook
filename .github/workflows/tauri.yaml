name: Tauri builds
on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.ref }}-tauri-build
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  build-tauri:
    permissions:
      id-token: write
      contents: read
    strategy:
      fail-fast: ${{ github.ref != 'refs/heads/main' }}
      matrix:
        os: [ubuntu-22.04, macos-13, macos-14]
        is-not-main:
          - ${{ github.ref != 'refs/heads/main' }}
        exclude:
          - is-not-main: true
            os: macos-13
          - is-not-main: true
            os: macos-14

    runs-on: ${{ matrix.os }}
    env:
      COMMIT_SHA: ${{ github.sha }}
    steps:
      - name: Free up disk space in action runner (Ubuntu)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get clean
          sudo rm -rf \
            "$AGENT_TOOLSDIRECTORY" \
            /usr/local/lib/android \
            /usr/local/lib/node_modules \
            /usr/local/share/boost \
            /usr/local/share/chromium \
            /usr/local/share/powershell \
            /usr/share/dotnet \
            /opt/ghc
          sudo rm -rf "$HOME/.rustup/toolchains" "$HOME/.rustup/update-hashes"
          df -h /
      - name: Free up disk space in action runner (Macos)
        if: matrix.os == 'macos-13' || matrix.os == 'macos-14'
        run: |
          sudo rm -rf \
          "$AGENT_TOOLSDIRECTORY" \
          /opt/google/chrome \
          /opt/microsoft/msedge \
          /opt/microsoft/powershell \
          /opt/pipx \
          /usr/lib/mono \
          /usr/local/julia* \
          /usr/local/lib/android \
          /usr/local/lib/node_modules \
          /usr/local/share/chromium \
          /usr/local/share/powershell \
          /usr/share/dotnet \
          /usr/share/swift
          df -h /
          find /Applications/ -name "Xcode*" | sort -r | tail --lines=+2 | xargs rm -rf

      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: nixbuild/nix-quick-install-action@v30
        with:
          nix_conf: |
            keep-env-derivations = true
            keep-outputs = true
      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          # collect garbage until the Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          # 1G = 1073741824
          gc-max-store-size-linux: 1G

      - run: ./prep-all.sh
        env:
          PUBLIC_WALLETCONNECT_PROJECT_ID: ${{ secrets.WALLETCONNECT_PROJECT_ID || 'test' }}

      - run: nix develop .#tauri-shell -c ob-tauri-unit-test

      - run: nix develop .#tauri-shell --command ob-tauri-before-build-ci
        working-directory: ./tauri-app
        env:
          WALLETCONNECT_PROJECT_ID: ${{ secrets.WALLETCONNECT_PROJECT_ID || 'test' }}
      - run: nix develop .#tauri-shell --command npm run svelte-lint-format-check
        working-directory: ./tauri-app

      - name: Reset workspace target before Rust tests
        run: |
          rm -rf target
          rm -rf tauri-app/src-tauri/target

      - name: Run Rust tests with reduced debug artifacts
        run: nix develop .#tauri-shell --command tauri-rs-test
        env:
          RUSTFLAGS: "-Cdebuginfo=0"
          CARGO_INCREMENTAL: 0

      - run: |
          rm -rf target
          rm -rf tauri-app/src-tauri/target

      - run: nix develop .#tauri-shell --command cargo tauri build --verbose
        working-directory: ./tauri-app

      - name: Reclaim workspace target artifacts
        run: |
          rm -rf target
          rm -rf tauri-app/build

      # remove release artifacts to free up space before checks
      - run: rm -rf tauri-app/src-tauri/target

      # check for npm package blacklists pkgs across all tauri related packages
      - uses: rainlanguage/github-chore/.github/actions/npm-blacklist@main

      - uses: rainlanguage/github-chore/.github/actions/npm-blacklist@main
        with:
          working-directory: packages/orderbook

      - uses: rainlanguage/github-chore/.github/actions/npm-blacklist@main
        with:
          working-directory: packages/ui-components

      - uses: rainlanguage/github-chore/.github/actions/npm-blacklist@main
        with:
          working-directory: tauri-app
