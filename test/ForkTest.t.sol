// SPDX-License-Identifier: CAL
pragma solidity =0.8.19;

import "forge-std/console.sol";
import {Test} from "forge-std/Test.sol";
import {IERC20} from "openzeppelin-contracts/contracts/token/ERC20/IERC20.sol";
import {RouteProcessorOrderBookV3ArbOrderTaker} from "src/concrete/arb/RouteProcessorOrderBookV3ArbOrderTaker.sol";

contract ForkTest is Test {
    function testForkTest() external {
        // set fork
        string memory forkRpcUrl = vm.envString("CI_DEPLOY_FLARE_RPC_URL");
        uint256 fork = vm.createFork("https://rpc.ankr.com/flare");
        vm.selectFork(fork);
        vm.rollFork(23711634);

        address sender = 0x850c40aBf6e325231ba2DeD1356d1f2c267e63Ce;

        address wflrAddress = 0x1D80c49BbBCd1C0911346656B529DF9E5c2F783d;
        IERC20 wflr = IERC20(wflrAddress);
        uint256 originalBalance = wflr.balanceOf(sender);

        RouteProcessorOrderBookV3ArbOrderTaker arbContract = RouteProcessorOrderBookV3ArbOrderTaker(0x56394785a22b3BE25470a0e03eD9E0a939C47b9b);
        bytes memory arbCalldata = hex"c3b7c7c30000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000006a579655b1fc3d0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000086af55ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000360000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000260000000000000000000000000078255d40df5b1834d1fbbf80c6549ce54d1e5c700000000000000000000000000000000000000000000000000000000000000010000000000000000000000001efd85e6c384fad9b80c6d508e9098eb91c4ed300000000000000000000000004ffc97bfb6dfce289f9b2a4083f5f5e940c8b88d000000000000000000000000760bd88284d565abe75a9d000cbf5eedbdfd6a0d00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001d80c49bbbcd1c0911346656b529df9e5c2f783d0000000000000000000000000000000000000000000000000000000000000012562bd75e19e548420f9f3da43a7d7d67c6344580256b952c9214192c445d6043000000000000000000000000000000000000000000000000000000000000000100000000000000000000000096b41289d90444b8add57e6f265db5ae8651df290000000000000000000000000000000000000000000000000000000000000006562bd75e19e548420f9f3da43a7d7d67c6344580256b952c9214192c445d6043000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000420296b41289d90444b8add57e6f265db5ae8651df2901ffff007520005032f43229f606d3aceae97045b9d6f7ea0056394785a22b3be25470a0e03ed9e0a939c47b9b000000000000000000000000000000000000000000000000000000000000";

        uint256 minExpected = 29932650725768253;
        vm.prank(sender);
        (bool success,) = address(arbContract).call(arbCalldata);

        assertTrue(success);

        uint256 newBalance = wflr.balanceOf(sender);
        uint256 received = newBalance - originalBalance;
        console.log(originalBalance);
        console.log(newBalance);
        console.log(received);

        assertGt(received, minExpected);
    }
}
